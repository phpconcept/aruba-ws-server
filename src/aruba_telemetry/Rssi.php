<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Rssi
 */
class Rssi extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * last optional sint32 = 1
     *
     * @var int
     */
    protected $last = null;

    /**
     * avg optional sint32 = 2
     *
     * @var int
     */
    protected $avg = null;

    /**
     * max optional sint32 = 3
     *
     * @var int
     */
    protected $max = null;

    /**
     * history repeated message = 4
     *
     * @var \Protobuf\Collection<\aruba_telemetry\History>
     */
    protected $history = null;

    /**
     * smooth optional sint32 = 5
     *
     * @var int
     */
    protected $smooth = null;

    /**
     * Check if 'last' has a value
     *
     * @return bool
     */
    public function hasLast()
    {
        return $this->last !== null;
    }

    /**
     * Get 'last' value
     *
     * @return int
     */
    public function getLast()
    {
        return $this->last;
    }

    /**
     * Set 'last' value
     *
     * @param int $value
     */
    public function setLast($value = null)
    {
        $this->last = $value;
    }

    /**
     * Check if 'avg' has a value
     *
     * @return bool
     */
    public function hasAvg()
    {
        return $this->avg !== null;
    }

    /**
     * Get 'avg' value
     *
     * @return int
     */
    public function getAvg()
    {
        return $this->avg;
    }

    /**
     * Set 'avg' value
     *
     * @param int $value
     */
    public function setAvg($value = null)
    {
        $this->avg = $value;
    }

    /**
     * Check if 'max' has a value
     *
     * @return bool
     */
    public function hasMax()
    {
        return $this->max !== null;
    }

    /**
     * Get 'max' value
     *
     * @return int
     */
    public function getMax()
    {
        return $this->max;
    }

    /**
     * Set 'max' value
     *
     * @param int $value
     */
    public function setMax($value = null)
    {
        $this->max = $value;
    }

    /**
     * Check if 'history' has a value
     *
     * @return bool
     */
    public function hasHistoryList()
    {
        return $this->history !== null;
    }

    /**
     * Get 'history' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\History>
     */
    public function getHistoryList()
    {
        return $this->history;
    }

    /**
     * Set 'history' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\History> $value
     */
    public function setHistoryList(\Protobuf\Collection $value = null)
    {
        $this->history = $value;
    }

    /**
     * Add a new element to 'history'
     *
     * @param \aruba_telemetry\History $value
     */
    public function addHistory(\aruba_telemetry\History $value)
    {
        if ($this->history === null) {
            $this->history = new \Protobuf\MessageCollection();
        }

        $this->history->add($value);
    }

    /**
     * Check if 'smooth' has a value
     *
     * @return bool
     */
    public function hasSmooth()
    {
        return $this->smooth !== null;
    }

    /**
     * Get 'smooth' value
     *
     * @return int
     */
    public function getSmooth()
    {
        return $this->smooth;
    }

    /**
     * Set 'smooth' value
     *
     * @param int $value
     */
    public function setSmooth($value = null)
    {
        $this->smooth = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'last' => null,
            'avg' => null,
            'max' => null,
            'history' => [],
            'smooth' => null
        ], $values);

        $message->setLast($values['last']);
        $message->setAvg($values['avg']);
        $message->setMax($values['max']);
        $message->setSmooth($values['smooth']);

        foreach ($values['history'] as $item) {
            $message->addHistory($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Rssi',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'last',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'avg',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'max',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'history',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.History'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'smooth',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->last !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeZigzag32($stream, $this->last);
        }

        if ($this->avg !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeZigzag32($stream, $this->avg);
        }

        if ($this->max !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeZigzag32($stream, $this->max);
        }

        if ($this->history !== null) {
            foreach ($this->history as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->smooth !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeZigzag32($stream, $this->smooth);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->last = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->avg = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->max = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\History();

                if ($this->history === null) {
                    $this->history = new \Protobuf\MessageCollection();
                }

                $this->history->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->smooth = $reader->readZigzag($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->last !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->last);
        }

        if ($this->avg !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->avg);
        }

        if ($this->max !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->max);
        }

        if ($this->history !== null) {
            foreach ($this->history as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->smooth !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->smooth);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->last = null;
        $this->avg = null;
        $this->max = null;
        $this->history = null;
        $this->smooth = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Rssi) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->last = ($message->last !== null) ? $message->last : $this->last;
        $this->avg = ($message->avg !== null) ? $message->avg : $this->avg;
        $this->max = ($message->max !== null) ? $message->max : $this->max;
        $this->history = ($message->history !== null) ? $message->history : $this->history;
        $this->smooth = ($message->smooth !== null) ? $message->smooth : $this->smooth;
    }


}

