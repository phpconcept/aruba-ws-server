<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Ibeacon
 */
class Ibeacon extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * uuid required bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $uuid = null;

    /**
     * major required uint32 = 2
     *
     * @var int
     */
    protected $major = null;

    /**
     * minor required uint32 = 3
     *
     * @var int
     */
    protected $minor = null;

    /**
     * power required sint32 = 4
     *
     * @var int
     */
    protected $power = null;

    /**
     * extra optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $extra = null;

    /**
     * Check if 'uuid' has a value
     *
     * @return bool
     */
    public function hasUuid()
    {
        return $this->uuid !== null;
    }

    /**
     * Get 'uuid' value
     *
     * @return \Protobuf\Stream
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * Set 'uuid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setUuid($value)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->uuid = $value;
    }

    /**
     * Check if 'major' has a value
     *
     * @return bool
     */
    public function hasMajor()
    {
        return $this->major !== null;
    }

    /**
     * Get 'major' value
     *
     * @return int
     */
    public function getMajor()
    {
        return $this->major;
    }

    /**
     * Set 'major' value
     *
     * @param int $value
     */
    public function setMajor($value)
    {
        $this->major = $value;
    }

    /**
     * Check if 'minor' has a value
     *
     * @return bool
     */
    public function hasMinor()
    {
        return $this->minor !== null;
    }

    /**
     * Get 'minor' value
     *
     * @return int
     */
    public function getMinor()
    {
        return $this->minor;
    }

    /**
     * Set 'minor' value
     *
     * @param int $value
     */
    public function setMinor($value)
    {
        $this->minor = $value;
    }

    /**
     * Check if 'power' has a value
     *
     * @return bool
     */
    public function hasPower()
    {
        return $this->power !== null;
    }

    /**
     * Get 'power' value
     *
     * @return int
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * Set 'power' value
     *
     * @param int $value
     */
    public function setPower($value)
    {
        $this->power = $value;
    }

    /**
     * Check if 'extra' has a value
     *
     * @return bool
     */
    public function hasExtra()
    {
        return $this->extra !== null;
    }

    /**
     * Get 'extra' value
     *
     * @return \Protobuf\Stream
     */
    public function getExtra()
    {
        return $this->extra;
    }

    /**
     * Set 'extra' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setExtra($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->extra = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['uuid'])) {
            throw new \InvalidArgumentException('Field "uuid" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['major'])) {
            throw new \InvalidArgumentException('Field "major" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['minor'])) {
            throw new \InvalidArgumentException('Field "minor" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['power'])) {
            throw new \InvalidArgumentException('Field "power" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'extra' => null
        ], $values);

        $message->setUuid($values['uuid']);
        $message->setMajor($values['major']);
        $message->setMinor($values['minor']);
        $message->setPower($values['power']);
        $message->setExtra($values['extra']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Ibeacon',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'uuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'major',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'minor',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'power',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'extra',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->uuid === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Ibeacon#uuid" (tag 1) is required but has no value.');
        }

        if ($this->major === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Ibeacon#major" (tag 2) is required but has no value.');
        }

        if ($this->minor === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Ibeacon#minor" (tag 3) is required but has no value.');
        }

        if ($this->power === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Ibeacon#power" (tag 4) is required but has no value.');
        }

        if ($this->uuid !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->uuid);
        }

        if ($this->major !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->major);
        }

        if ($this->minor !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->minor);
        }

        if ($this->power !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeZigzag32($stream, $this->power);
        }

        if ($this->extra !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->extra);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->uuid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->major = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->minor = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->power = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->extra = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->uuid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->uuid);
        }

        if ($this->major !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->major);
        }

        if ($this->minor !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->minor);
        }

        if ($this->power !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->power);
        }

        if ($this->extra !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->extra);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->uuid = null;
        $this->major = null;
        $this->minor = null;
        $this->power = null;
        $this->extra = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Ibeacon) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->uuid = ($message->uuid !== null) ? $message->uuid : $this->uuid;
        $this->major = ($message->major !== null) ? $message->major : $this->major;
        $this->minor = ($message->minor !== null) ? $message->minor : $this->minor;
        $this->power = ($message->power !== null) ? $message->power : $this->power;
        $this->extra = ($message->extra !== null) ? $message->extra : $this->extra;
    }


}

