<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-sb-action.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Action
 */
class Action extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * actionId optional string = 1
     *
     * @var string
     */
    protected $actionId = null;

    /**
     * type optional enum = 2
     *
     * @var \aruba_telemetry\ActionType
     */
    protected $type = null;

    /**
     * deviceMac optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $deviceMac = null;

    /**
     * serviceUuid optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $serviceUuid = null;

    /**
     * characteristicUuid optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $characteristicUuid = null;

    /**
     * timeOut optional uint32 = 6
     *
     * @var int
     */
    protected $timeOut = null;

    /**
     * value optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $value = null;

    /**
     * authentication optional message = 8
     *
     * @var \aruba_telemetry\Authentication
     */
    protected $authentication = null;

    /**
     * bondingKey optional message = 9
     *
     * @var \aruba_telemetry\BleBondingKey
     */
    protected $bondingKey = null;

    /**
     * Check if 'actionId' has a value
     *
     * @return bool
     */
    public function hasActionId()
    {
        return $this->actionId !== null;
    }

    /**
     * Get 'actionId' value
     *
     * @return string
     */
    public function getActionId()
    {
        return $this->actionId;
    }

    /**
     * Set 'actionId' value
     *
     * @param string $value
     */
    public function setActionId($value = null)
    {
        $this->actionId = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \aruba_telemetry\ActionType
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \aruba_telemetry\ActionType $value
     */
    public function setType(\aruba_telemetry\ActionType $value = null)
    {
        $this->type = $value;
    }

    /**
     * Check if 'deviceMac' has a value
     *
     * @return bool
     */
    public function hasDeviceMac()
    {
        return $this->deviceMac !== null;
    }

    /**
     * Get 'deviceMac' value
     *
     * @return \Protobuf\Stream
     */
    public function getDeviceMac()
    {
        return $this->deviceMac;
    }

    /**
     * Set 'deviceMac' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDeviceMac($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->deviceMac = $value;
    }

    /**
     * Check if 'serviceUuid' has a value
     *
     * @return bool
     */
    public function hasServiceUuid()
    {
        return $this->serviceUuid !== null;
    }

    /**
     * Get 'serviceUuid' value
     *
     * @return \Protobuf\Stream
     */
    public function getServiceUuid()
    {
        return $this->serviceUuid;
    }

    /**
     * Set 'serviceUuid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setServiceUuid($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->serviceUuid = $value;
    }

    /**
     * Check if 'characteristicUuid' has a value
     *
     * @return bool
     */
    public function hasCharacteristicUuid()
    {
        return $this->characteristicUuid !== null;
    }

    /**
     * Get 'characteristicUuid' value
     *
     * @return \Protobuf\Stream
     */
    public function getCharacteristicUuid()
    {
        return $this->characteristicUuid;
    }

    /**
     * Set 'characteristicUuid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setCharacteristicUuid($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->characteristicUuid = $value;
    }

    /**
     * Check if 'timeOut' has a value
     *
     * @return bool
     */
    public function hasTimeOut()
    {
        return $this->timeOut !== null;
    }

    /**
     * Get 'timeOut' value
     *
     * @return int
     */
    public function getTimeOut()
    {
        return $this->timeOut;
    }

    /**
     * Set 'timeOut' value
     *
     * @param int $value
     */
    public function setTimeOut($value = null)
    {
        $this->timeOut = $value;
    }

    /**
     * Check if 'value' has a value
     *
     * @return bool
     */
    public function hasValue()
    {
        return $this->value !== null;
    }

    /**
     * Get 'value' value
     *
     * @return \Protobuf\Stream
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Set 'value' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setValue($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->value = $value;
    }

    /**
     * Check if 'authentication' has a value
     *
     * @return bool
     */
    public function hasAuthentication()
    {
        return $this->authentication !== null;
    }

    /**
     * Get 'authentication' value
     *
     * @return \aruba_telemetry\Authentication
     */
    public function getAuthentication()
    {
        return $this->authentication;
    }

    /**
     * Set 'authentication' value
     *
     * @param \aruba_telemetry\Authentication $value
     */
    public function setAuthentication(\aruba_telemetry\Authentication $value = null)
    {
        $this->authentication = $value;
    }

    /**
     * Check if 'bondingKey' has a value
     *
     * @return bool
     */
    public function hasBondingKey()
    {
        return $this->bondingKey !== null;
    }

    /**
     * Get 'bondingKey' value
     *
     * @return \aruba_telemetry\BleBondingKey
     */
    public function getBondingKey()
    {
        return $this->bondingKey;
    }

    /**
     * Set 'bondingKey' value
     *
     * @param \aruba_telemetry\BleBondingKey $value
     */
    public function setBondingKey(\aruba_telemetry\BleBondingKey $value = null)
    {
        $this->bondingKey = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'actionId' => null,
            'type' => null,
            'deviceMac' => null,
            'serviceUuid' => null,
            'characteristicUuid' => null,
            'timeOut' => null,
            'value' => null,
            'authentication' => null,
            'bondingKey' => null
        ], $values);

        $message->setActionId($values['actionId']);
        $message->setType($values['type']);
        $message->setDeviceMac($values['deviceMac']);
        $message->setServiceUuid($values['serviceUuid']);
        $message->setCharacteristicUuid($values['characteristicUuid']);
        $message->setTimeOut($values['timeOut']);
        $message->setValue($values['value']);
        $message->setAuthentication($values['authentication']);
        $message->setBondingKey($values['bondingKey']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Action',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'actionId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ActionType'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'deviceMac',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'serviceUuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'characteristicUuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'timeOut',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'authentication',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Authentication'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'bondingKey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.BleBondingKey'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->actionId !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->actionId);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->type->value());
        }

        if ($this->deviceMac !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->deviceMac);
        }

        if ($this->serviceUuid !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->serviceUuid);
        }

        if ($this->characteristicUuid !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->characteristicUuid);
        }

        if ($this->timeOut !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->timeOut);
        }

        if ($this->value !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->value);
        }

        if ($this->authentication !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->authentication->serializedSize($sizeContext));
            $this->authentication->writeTo($context);
        }

        if ($this->bondingKey !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->bondingKey->serializedSize($sizeContext));
            $this->bondingKey->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->actionId = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->type = \aruba_telemetry\ActionType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->deviceMac = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->serviceUuid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->characteristicUuid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->timeOut = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->value = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Authentication();

                $this->authentication = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\BleBondingKey();

                $this->bondingKey = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->actionId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->actionId);
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->type->value());
        }

        if ($this->deviceMac !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->deviceMac);
        }

        if ($this->serviceUuid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->serviceUuid);
        }

        if ($this->characteristicUuid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->characteristicUuid);
        }

        if ($this->timeOut !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timeOut);
        }

        if ($this->value !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->value);
        }

        if ($this->authentication !== null) {
            $innerSize = $this->authentication->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->bondingKey !== null) {
            $innerSize = $this->bondingKey->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->actionId = null;
        $this->type = null;
        $this->deviceMac = null;
        $this->serviceUuid = null;
        $this->characteristicUuid = null;
        $this->timeOut = null;
        $this->value = null;
        $this->authentication = null;
        $this->bondingKey = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Action) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->actionId = ($message->actionId !== null) ? $message->actionId : $this->actionId;
        $this->type = ($message->type !== null) ? $message->type : $this->type;
        $this->deviceMac = ($message->deviceMac !== null) ? $message->deviceMac : $this->deviceMac;
        $this->serviceUuid = ($message->serviceUuid !== null) ? $message->serviceUuid : $this->serviceUuid;
        $this->characteristicUuid = ($message->characteristicUuid !== null) ? $message->characteristicUuid : $this->characteristicUuid;
        $this->timeOut = ($message->timeOut !== null) ? $message->timeOut : $this->timeOut;
        $this->value = ($message->value !== null) ? $message->value : $this->value;
        $this->authentication = ($message->authentication !== null) ? $message->authentication : $this->authentication;
        $this->bondingKey = ($message->bondingKey !== null) ? $message->bondingKey : $this->bondingKey;
    }


}

