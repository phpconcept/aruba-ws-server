<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf enum : aruba_telemetry.switchState
 */
class switchState extends \Protobuf\Enum
{

    /**
     * unknown = 1
     */
    const unknown_VALUE = 1;

    /**
     * on = 2
     */
    const on_VALUE = 2;

    /**
     * off = 3
     */
    const off_VALUE = 3;

    /**
     * @var \aruba_telemetry\switchState
     */
    protected static $unknown = null;

    /**
     * @var \aruba_telemetry\switchState
     */
    protected static $on = null;

    /**
     * @var \aruba_telemetry\switchState
     */
    protected static $off = null;

    /**
     * @return \aruba_telemetry\switchState
     */
    public static function unknown()
    {
        if (self::$unknown !== null) {
            return self::$unknown;
        }

        return self::$unknown = new self('unknown', self::unknown_VALUE);
    }

    /**
     * @return \aruba_telemetry\switchState
     */
    public static function on()
    {
        if (self::$on !== null) {
            return self::$on;
        }

        return self::$on = new self('on', self::on_VALUE);
    }

    /**
     * @return \aruba_telemetry\switchState
     */
    public static function off()
    {
        if (self::$off !== null) {
            return self::$off;
        }

        return self::$off = new self('off', self::off_VALUE);
    }

    /**
     * @param int $value
     * @return \aruba_telemetry\switchState
     */
    public static function valueOf($value)
    {
        switch ($value) {
            case 1: return self::unknown();
            case 2: return self::on();
            case 3: return self::off();
            default: return null;
        }
    }


}

