<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-zb.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.NbZbMsg
 */
class NbZbMsg extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * radio_mac optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $radio_mac = null;

    /**
     * report optional message = 2
     *
     * @var \aruba_telemetry\ZbNbReport
     */
    protected $report = null;

    /**
     * ack optional message = 3
     *
     * @var \aruba_telemetry\ZbNbAck
     */
    protected $ack = null;

    /**
     * response optional message = 4
     *
     * @var \aruba_telemetry\ZbNbRsp
     */
    protected $response = null;

    /**
     * Check if 'radio_mac' has a value
     *
     * @return bool
     */
    public function hasRadioMac()
    {
        return $this->radio_mac !== null;
    }

    /**
     * Get 'radio_mac' value
     *
     * @return \Protobuf\Stream
     */
    public function getRadioMac()
    {
        return $this->radio_mac;
    }

    /**
     * Set 'radio_mac' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setRadioMac($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->radio_mac = $value;
    }

    /**
     * Check if 'report' has a value
     *
     * @return bool
     */
    public function hasReport()
    {
        return $this->report !== null;
    }

    /**
     * Get 'report' value
     *
     * @return \aruba_telemetry\ZbNbReport
     */
    public function getReport()
    {
        return $this->report;
    }

    /**
     * Set 'report' value
     *
     * @param \aruba_telemetry\ZbNbReport $value
     */
    public function setReport(\aruba_telemetry\ZbNbReport $value = null)
    {
        $this->report = $value;
    }

    /**
     * Check if 'ack' has a value
     *
     * @return bool
     */
    public function hasAck()
    {
        return $this->ack !== null;
    }

    /**
     * Get 'ack' value
     *
     * @return \aruba_telemetry\ZbNbAck
     */
    public function getAck()
    {
        return $this->ack;
    }

    /**
     * Set 'ack' value
     *
     * @param \aruba_telemetry\ZbNbAck $value
     */
    public function setAck(\aruba_telemetry\ZbNbAck $value = null)
    {
        $this->ack = $value;
    }

    /**
     * Check if 'response' has a value
     *
     * @return bool
     */
    public function hasResponse()
    {
        return $this->response !== null;
    }

    /**
     * Get 'response' value
     *
     * @return \aruba_telemetry\ZbNbRsp
     */
    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Set 'response' value
     *
     * @param \aruba_telemetry\ZbNbRsp $value
     */
    public function setResponse(\aruba_telemetry\ZbNbRsp $value = null)
    {
        $this->response = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'radio_mac' => null,
            'report' => null,
            'ack' => null,
            'response' => null
        ], $values);

        $message->setRadioMac($values['radio_mac']);
        $message->setReport($values['report']);
        $message->setAck($values['ack']);
        $message->setResponse($values['response']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'NbZbMsg',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'radio_mac',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'report',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbNbReport'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'ack',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbNbAck'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'response',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbNbRsp'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->radio_mac !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->radio_mac);
        }

        if ($this->report !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->report->serializedSize($sizeContext));
            $this->report->writeTo($context);
        }

        if ($this->ack !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->ack->serializedSize($sizeContext));
            $this->ack->writeTo($context);
        }

        if ($this->response !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->response->serializedSize($sizeContext));
            $this->response->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->radio_mac = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbNbReport();

                $this->report = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbNbAck();

                $this->ack = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbNbRsp();

                $this->response = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->radio_mac !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->radio_mac);
        }

        if ($this->report !== null) {
            $innerSize = $this->report->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ack !== null) {
            $innerSize = $this->ack->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->response !== null) {
            $innerSize = $this->response->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->radio_mac = null;
        $this->report = null;
        $this->ack = null;
        $this->response = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\NbZbMsg) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->radio_mac = ($message->radio_mac !== null) ? $message->radio_mac : $this->radio_mac;
        $this->report = ($message->report !== null) ? $message->report : $this->report;
        $this->ack = ($message->ack !== null) ? $message->ack : $this->ack;
        $this->response = ($message->response !== null) ? $message->response : $this->response;
    }


}

