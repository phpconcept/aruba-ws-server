<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-types.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Meta
 */
class Meta extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * version required uint64 = 1
     *
     * @var int
     */
    protected $version = null;

    /**
     * access_token optional string = 2
     *
     * @var string
     */
    protected $access_token = null;

    /**
     * nbTopic optional enum = 3
     *
     * @var \aruba_telemetry\NbTopic
     */
    protected $nbTopic = null;

    /**
     * sbTopic optional enum = 4
     *
     * @var \aruba_telemetry\SbTopic
     */
    protected $sbTopic = null;

    /**
     * Check if 'version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->version !== null;
    }

    /**
     * Get 'version' value
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set 'version' value
     *
     * @param int $value
     */
    public function setVersion($value)
    {
        $this->version = $value;
    }

    /**
     * Check if 'access_token' has a value
     *
     * @return bool
     */
    public function hasAccessToken()
    {
        return $this->access_token !== null;
    }

    /**
     * Get 'access_token' value
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->access_token;
    }

    /**
     * Set 'access_token' value
     *
     * @param string $value
     */
    public function setAccessToken($value = null)
    {
        $this->access_token = $value;
    }

    /**
     * Check if 'nbTopic' has a value
     *
     * @return bool
     */
    public function hasNbTopic()
    {
        return $this->nbTopic !== null;
    }

    /**
     * Get 'nbTopic' value
     *
     * @return \aruba_telemetry\NbTopic
     */
    public function getNbTopic()
    {
        return $this->nbTopic;
    }

    /**
     * Set 'nbTopic' value
     *
     * @param \aruba_telemetry\NbTopic $value
     */
    public function setNbTopic(\aruba_telemetry\NbTopic $value = null)
    {
        $this->nbTopic = $value;
    }

    /**
     * Check if 'sbTopic' has a value
     *
     * @return bool
     */
    public function hasSbTopic()
    {
        return $this->sbTopic !== null;
    }

    /**
     * Get 'sbTopic' value
     *
     * @return \aruba_telemetry\SbTopic
     */
    public function getSbTopic()
    {
        return $this->sbTopic;
    }

    /**
     * Set 'sbTopic' value
     *
     * @param \aruba_telemetry\SbTopic $value
     */
    public function setSbTopic(\aruba_telemetry\SbTopic $value = null)
    {
        $this->sbTopic = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['version'])) {
            throw new \InvalidArgumentException('Field "version" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'access_token' => null,
            'nbTopic' => null,
            'sbTopic' => null
        ], $values);

        $message->setVersion($values['version']);
        $message->setAccessToken($values['access_token']);
        $message->setNbTopic($values['nbTopic']);
        $message->setSbTopic($values['sbTopic']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Meta',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'access_token',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'nbTopic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.NbTopic'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'sbTopic',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.SbTopic'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->version === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Meta#version" (tag 1) is required but has no value.');
        }

        if ($this->version !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->version);
        }

        if ($this->access_token !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->access_token);
        }

        if ($this->nbTopic !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->nbTopic->value());
        }

        if ($this->sbTopic !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->sbTopic->value());
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->version = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->access_token = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->nbTopic = \aruba_telemetry\NbTopic::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->sbTopic = \aruba_telemetry\SbTopic::valueOf($reader->readVarint($stream));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->version !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->version);
        }

        if ($this->access_token !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->access_token);
        }

        if ($this->nbTopic !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->nbTopic->value());
        }

        if ($this->sbTopic !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sbTopic->value());
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->version = null;
        $this->access_token = null;
        $this->nbTopic = null;
        $this->sbTopic = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Meta) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->version = ($message->version !== null) ? $message->version : $this->version;
        $this->access_token = ($message->access_token !== null) ? $message->access_token : $this->access_token;
        $this->nbTopic = ($message->nbTopic !== null) ? $message->nbTopic : $this->nbTopic;
        $this->sbTopic = ($message->sbTopic !== null) ? $message->sbTopic : $this->sbTopic;
    }


}

