<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-characteristic.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Characteristic
 */
class Characteristic extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * deviceMac optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $deviceMac = null;

    /**
     * serviceUuid optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $serviceUuid = null;

    /**
     * characteristicUuid optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $characteristicUuid = null;

    /**
     * value optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $value = null;

    /**
     * description optional string = 5
     *
     * @var string
     */
    protected $description = null;

    /**
     * properties repeated enum = 6
     *
     * @var \Protobuf\Collection<\aruba_telemetry\CharProperty>
     */
    protected $properties = null;

    /**
     * Check if 'deviceMac' has a value
     *
     * @return bool
     */
    public function hasDeviceMac()
    {
        return $this->deviceMac !== null;
    }

    /**
     * Get 'deviceMac' value
     *
     * @return \Protobuf\Stream
     */
    public function getDeviceMac()
    {
        return $this->deviceMac;
    }

    /**
     * Set 'deviceMac' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setDeviceMac($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->deviceMac = $value;
    }

    /**
     * Check if 'serviceUuid' has a value
     *
     * @return bool
     */
    public function hasServiceUuid()
    {
        return $this->serviceUuid !== null;
    }

    /**
     * Get 'serviceUuid' value
     *
     * @return \Protobuf\Stream
     */
    public function getServiceUuid()
    {
        return $this->serviceUuid;
    }

    /**
     * Set 'serviceUuid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setServiceUuid($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->serviceUuid = $value;
    }

    /**
     * Check if 'characteristicUuid' has a value
     *
     * @return bool
     */
    public function hasCharacteristicUuid()
    {
        return $this->characteristicUuid !== null;
    }

    /**
     * Get 'characteristicUuid' value
     *
     * @return \Protobuf\Stream
     */
    public function getCharacteristicUuid()
    {
        return $this->characteristicUuid;
    }

    /**
     * Set 'characteristicUuid' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setCharacteristicUuid($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->characteristicUuid = $value;
    }

    /**
     * Check if 'value' has a value
     *
     * @return bool
     */
    public function hasValue()
    {
        return $this->value !== null;
    }

    /**
     * Get 'value' value
     *
     * @return \Protobuf\Stream
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Set 'value' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setValue($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->value = $value;
    }

    /**
     * Check if 'description' has a value
     *
     * @return bool
     */
    public function hasDescription()
    {
        return $this->description !== null;
    }

    /**
     * Get 'description' value
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set 'description' value
     *
     * @param string $value
     */
    public function setDescription($value = null)
    {
        $this->description = $value;
    }

    /**
     * Check if 'properties' has a value
     *
     * @return bool
     */
    public function hasPropertiesList()
    {
        return $this->properties !== null;
    }

    /**
     * Get 'properties' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\CharProperty>
     */
    public function getPropertiesList()
    {
        return $this->properties;
    }

    /**
     * Set 'properties' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\CharProperty> $value
     */
    public function setPropertiesList(\Protobuf\Collection $value = null)
    {
        $this->properties = $value;
    }

    /**
     * Add a new element to 'properties'
     *
     * @param \aruba_telemetry\CharProperty $value
     */
    public function addProperties(\aruba_telemetry\CharProperty $value)
    {
        if ($this->properties === null) {
            $this->properties = new \Protobuf\EnumCollection();
        }

        $this->properties->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'deviceMac' => null,
            'serviceUuid' => null,
            'characteristicUuid' => null,
            'value' => null,
            'description' => null,
            'properties' => []
        ], $values);

        $message->setDeviceMac($values['deviceMac']);
        $message->setServiceUuid($values['serviceUuid']);
        $message->setCharacteristicUuid($values['characteristicUuid']);
        $message->setValue($values['value']);
        $message->setDescription($values['description']);

        foreach ($values['properties'] as $item) {
            $message->addProperties($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Characteristic',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'deviceMac',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'serviceUuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'characteristicUuid',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'value',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'description',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'properties',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.CharProperty'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->deviceMac !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->deviceMac);
        }

        if ($this->serviceUuid !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->serviceUuid);
        }

        if ($this->characteristicUuid !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->characteristicUuid);
        }

        if ($this->value !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->value);
        }

        if ($this->description !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->description);
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $writer->writeVarint($stream, 48);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->deviceMac = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->serviceUuid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->characteristicUuid = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->value = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->description = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->properties === null) {
                    $this->properties = new \Protobuf\EnumCollection();
                }

                $this->properties->add(\aruba_telemetry\CharProperty::valueOf($reader->readVarint($stream)));

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->deviceMac !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->deviceMac);
        }

        if ($this->serviceUuid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->serviceUuid);
        }

        if ($this->characteristicUuid !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->characteristicUuid);
        }

        if ($this->value !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->value);
        }

        if ($this->description !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->description);
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->deviceMac = null;
        $this->serviceUuid = null;
        $this->characteristicUuid = null;
        $this->value = null;
        $this->description = null;
        $this->properties = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Characteristic) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->deviceMac = ($message->deviceMac !== null) ? $message->deviceMac : $this->deviceMac;
        $this->serviceUuid = ($message->serviceUuid !== null) ? $message->serviceUuid : $this->serviceUuid;
        $this->characteristicUuid = ($message->characteristicUuid !== null) ? $message->characteristicUuid : $this->characteristicUuid;
        $this->value = ($message->value !== null) ? $message->value : $this->value;
        $this->description = ($message->description !== null) ? $message->description : $this->description;
        $this->properties = ($message->properties !== null) ? $message->properties : $this->properties;
    }


}

