<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Reported
 */
class Reported extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * mac optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $mac = null;

    /**
     * deviceClass repeated enum = 2
     *
     * @var \Protobuf\Collection<\aruba_telemetry\deviceClassEnum>
     */
    protected $deviceClass = null;

    /**
     * model optional string = 3
     *
     * @var string
     */
    protected $model = null;

    /**
     * firmware optional message = 4
     *
     * @var \aruba_telemetry\Firmware
     */
    protected $firmware = null;

    /**
     * assetId optional string = 5
     *
     * @var string
     */
    protected $assetId = null;

    /**
     * publicKey optional string = 6
     *
     * @var string
     */
    protected $publicKey = null;

    /**
     * lastSeen optional uint64 = 7
     *
     * @var int
     */
    protected $lastSeen = null;

    /**
     * bevent optional message = 9
     *
     * @var \aruba_telemetry\BeaconEvent
     */
    protected $bevent = null;

    /**
     * rssi optional message = 10
     *
     * @var \aruba_telemetry\Rssi
     */
    protected $rssi = null;

    /**
     * cell optional message = 11
     *
     * @var \aruba_telemetry\Cell
     */
    protected $cell = null;

    /**
     * beacons repeated message = 12
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Beacons>
     */
    protected $beacons = null;

    /**
     * txpower optional sint32 = 13
     *
     * @var int
     */
    protected $txpower = null;

    /**
     * sensors optional message = 14
     *
     * @var \aruba_telemetry\Sensors
     */
    protected $sensors = null;

    /**
     * stats optional message = 16
     *
     * @var \aruba_telemetry\Stats
     */
    protected $stats = null;

    /**
     * inputs optional message = 17
     *
     * @var \aruba_telemetry\Inputs
     */
    protected $inputs = null;

    /**
     * vendorData optional message = 18
     *
     * @var \aruba_telemetry\VendorData
     */
    protected $vendorData = null;

    /**
     * vendorName optional string = 19
     *
     * @var string
     */
    protected $vendorName = null;

    /**
     * sensorTimestamp optional uint64 = 20
     *
     * @var int
     */
    protected $sensorTimestamp = null;

    /**
     * flags optional uint32 = 21
     *
     * @var int
     */
    protected $flags = null;

    /**
     * localName optional string = 22
     *
     * @var string
     */
    protected $localName = null;

    /**
     * identity optional string = 23
     *
     * @var string
     */
    protected $identity = null;

    /**
     * Check if 'mac' has a value
     *
     * @return bool
     */
    public function hasMac()
    {
        return $this->mac !== null;
    }

    /**
     * Get 'mac' value
     *
     * @return \Protobuf\Stream
     */
    public function getMac()
    {
        return $this->mac;
    }

    /**
     * Set 'mac' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setMac($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->mac = $value;
    }

    /**
     * Check if 'deviceClass' has a value
     *
     * @return bool
     */
    public function hasDeviceClassList()
    {
        return $this->deviceClass !== null;
    }

    /**
     * Get 'deviceClass' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\deviceClassEnum>
     */
    public function getDeviceClassList()
    {
        return $this->deviceClass;
    }

    /**
     * Set 'deviceClass' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\deviceClassEnum> $value
     */
    public function setDeviceClassList(\Protobuf\Collection $value = null)
    {
        $this->deviceClass = $value;
    }

    /**
     * Add a new element to 'deviceClass'
     *
     * @param \aruba_telemetry\deviceClassEnum $value
     */
    public function addDeviceClass(\aruba_telemetry\deviceClassEnum $value)
    {
        if ($this->deviceClass === null) {
            $this->deviceClass = new \Protobuf\EnumCollection();
        }

        $this->deviceClass->add($value);
    }

    /**
     * Check if 'model' has a value
     *
     * @return bool
     */
    public function hasModel()
    {
        return $this->model !== null;
    }

    /**
     * Get 'model' value
     *
     * @return string
     */
    public function getModel()
    {
        return $this->model;
    }

    /**
     * Set 'model' value
     *
     * @param string $value
     */
    public function setModel($value = null)
    {
        $this->model = $value;
    }

    /**
     * Check if 'firmware' has a value
     *
     * @return bool
     */
    public function hasFirmware()
    {
        return $this->firmware !== null;
    }

    /**
     * Get 'firmware' value
     *
     * @return \aruba_telemetry\Firmware
     */
    public function getFirmware()
    {
        return $this->firmware;
    }

    /**
     * Set 'firmware' value
     *
     * @param \aruba_telemetry\Firmware $value
     */
    public function setFirmware(\aruba_telemetry\Firmware $value = null)
    {
        $this->firmware = $value;
    }

    /**
     * Check if 'assetId' has a value
     *
     * @return bool
     */
    public function hasAssetId()
    {
        return $this->assetId !== null;
    }

    /**
     * Get 'assetId' value
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->assetId;
    }

    /**
     * Set 'assetId' value
     *
     * @param string $value
     */
    public function setAssetId($value = null)
    {
        $this->assetId = $value;
    }

    /**
     * Check if 'publicKey' has a value
     *
     * @return bool
     */
    public function hasPublicKey()
    {
        return $this->publicKey !== null;
    }

    /**
     * Get 'publicKey' value
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->publicKey;
    }

    /**
     * Set 'publicKey' value
     *
     * @param string $value
     */
    public function setPublicKey($value = null)
    {
        $this->publicKey = $value;
    }

    /**
     * Check if 'lastSeen' has a value
     *
     * @return bool
     */
    public function hasLastSeen()
    {
        return $this->lastSeen !== null;
    }

    /**
     * Get 'lastSeen' value
     *
     * @return int
     */
    public function getLastSeen()
    {
        return $this->lastSeen;
    }

    /**
     * Set 'lastSeen' value
     *
     * @param int $value
     */
    public function setLastSeen($value = null)
    {
        $this->lastSeen = $value;
    }

    /**
     * Check if 'bevent' has a value
     *
     * @return bool
     */
    public function hasBevent()
    {
        return $this->bevent !== null;
    }

    /**
     * Get 'bevent' value
     *
     * @return \aruba_telemetry\BeaconEvent
     */
    public function getBevent()
    {
        return $this->bevent;
    }

    /**
     * Set 'bevent' value
     *
     * @param \aruba_telemetry\BeaconEvent $value
     */
    public function setBevent(\aruba_telemetry\BeaconEvent $value = null)
    {
        $this->bevent = $value;
    }

    /**
     * Check if 'rssi' has a value
     *
     * @return bool
     */
    public function hasRssi()
    {
        return $this->rssi !== null;
    }

    /**
     * Get 'rssi' value
     *
     * @return \aruba_telemetry\Rssi
     */
    public function getRssi()
    {
        return $this->rssi;
    }

    /**
     * Set 'rssi' value
     *
     * @param \aruba_telemetry\Rssi $value
     */
    public function setRssi(\aruba_telemetry\Rssi $value = null)
    {
        $this->rssi = $value;
    }

    /**
     * Check if 'cell' has a value
     *
     * @return bool
     */
    public function hasCell()
    {
        return $this->cell !== null;
    }

    /**
     * Get 'cell' value
     *
     * @return \aruba_telemetry\Cell
     */
    public function getCell()
    {
        return $this->cell;
    }

    /**
     * Set 'cell' value
     *
     * @param \aruba_telemetry\Cell $value
     */
    public function setCell(\aruba_telemetry\Cell $value = null)
    {
        $this->cell = $value;
    }

    /**
     * Check if 'beacons' has a value
     *
     * @return bool
     */
    public function hasBeaconsList()
    {
        return $this->beacons !== null;
    }

    /**
     * Get 'beacons' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Beacons>
     */
    public function getBeaconsList()
    {
        return $this->beacons;
    }

    /**
     * Set 'beacons' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Beacons> $value
     */
    public function setBeaconsList(\Protobuf\Collection $value = null)
    {
        $this->beacons = $value;
    }

    /**
     * Add a new element to 'beacons'
     *
     * @param \aruba_telemetry\Beacons $value
     */
    public function addBeacons(\aruba_telemetry\Beacons $value)
    {
        if ($this->beacons === null) {
            $this->beacons = new \Protobuf\MessageCollection();
        }

        $this->beacons->add($value);
    }

    /**
     * Check if 'txpower' has a value
     *
     * @return bool
     */
    public function hasTxpower()
    {
        return $this->txpower !== null;
    }

    /**
     * Get 'txpower' value
     *
     * @return int
     */
    public function getTxpower()
    {
        return $this->txpower;
    }

    /**
     * Set 'txpower' value
     *
     * @param int $value
     */
    public function setTxpower($value = null)
    {
        $this->txpower = $value;
    }

    /**
     * Check if 'sensors' has a value
     *
     * @return bool
     */
    public function hasSensors()
    {
        return $this->sensors !== null;
    }

    /**
     * Get 'sensors' value
     *
     * @return \aruba_telemetry\Sensors
     */
    public function getSensors()
    {
        return $this->sensors;
    }

    /**
     * Set 'sensors' value
     *
     * @param \aruba_telemetry\Sensors $value
     */
    public function setSensors(\aruba_telemetry\Sensors $value = null)
    {
        $this->sensors = $value;
    }

    /**
     * Check if 'stats' has a value
     *
     * @return bool
     */
    public function hasStats()
    {
        return $this->stats !== null;
    }

    /**
     * Get 'stats' value
     *
     * @return \aruba_telemetry\Stats
     */
    public function getStats()
    {
        return $this->stats;
    }

    /**
     * Set 'stats' value
     *
     * @param \aruba_telemetry\Stats $value
     */
    public function setStats(\aruba_telemetry\Stats $value = null)
    {
        $this->stats = $value;
    }

    /**
     * Check if 'inputs' has a value
     *
     * @return bool
     */
    public function hasInputs()
    {
        return $this->inputs !== null;
    }

    /**
     * Get 'inputs' value
     *
     * @return \aruba_telemetry\Inputs
     */
    public function getInputs()
    {
        return $this->inputs;
    }

    /**
     * Set 'inputs' value
     *
     * @param \aruba_telemetry\Inputs $value
     */
    public function setInputs(\aruba_telemetry\Inputs $value = null)
    {
        $this->inputs = $value;
    }

    /**
     * Check if 'vendorData' has a value
     *
     * @return bool
     */
    public function hasVendorData()
    {
        return $this->vendorData !== null;
    }

    /**
     * Get 'vendorData' value
     *
     * @return \aruba_telemetry\VendorData
     */
    public function getVendorData()
    {
        return $this->vendorData;
    }

    /**
     * Set 'vendorData' value
     *
     * @param \aruba_telemetry\VendorData $value
     */
    public function setVendorData(\aruba_telemetry\VendorData $value = null)
    {
        $this->vendorData = $value;
    }

    /**
     * Check if 'vendorName' has a value
     *
     * @return bool
     */
    public function hasVendorName()
    {
        return $this->vendorName !== null;
    }

    /**
     * Get 'vendorName' value
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->vendorName;
    }

    /**
     * Set 'vendorName' value
     *
     * @param string $value
     */
    public function setVendorName($value = null)
    {
        $this->vendorName = $value;
    }

    /**
     * Check if 'sensorTimestamp' has a value
     *
     * @return bool
     */
    public function hasSensorTimestamp()
    {
        return $this->sensorTimestamp !== null;
    }

    /**
     * Get 'sensorTimestamp' value
     *
     * @return int
     */
    public function getSensorTimestamp()
    {
        return $this->sensorTimestamp;
    }

    /**
     * Set 'sensorTimestamp' value
     *
     * @param int $value
     */
    public function setSensorTimestamp($value = null)
    {
        $this->sensorTimestamp = $value;
    }

    /**
     * Check if 'flags' has a value
     *
     * @return bool
     */
    public function hasFlags()
    {
        return $this->flags !== null;
    }

    /**
     * Get 'flags' value
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->flags;
    }

    /**
     * Set 'flags' value
     *
     * @param int $value
     */
    public function setFlags($value = null)
    {
        $this->flags = $value;
    }

    /**
     * Check if 'localName' has a value
     *
     * @return bool
     */
    public function hasLocalName()
    {
        return $this->localName !== null;
    }

    /**
     * Get 'localName' value
     *
     * @return string
     */
    public function getLocalName()
    {
        return $this->localName;
    }

    /**
     * Set 'localName' value
     *
     * @param string $value
     */
    public function setLocalName($value = null)
    {
        $this->localName = $value;
    }

    /**
     * Check if 'identity' has a value
     *
     * @return bool
     */
    public function hasIdentity()
    {
        return $this->identity !== null;
    }

    /**
     * Get 'identity' value
     *
     * @return string
     */
    public function getIdentity()
    {
        return $this->identity;
    }

    /**
     * Set 'identity' value
     *
     * @param string $value
     */
    public function setIdentity($value = null)
    {
        $this->identity = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'mac' => null,
            'deviceClass' => [],
            'model' => null,
            'firmware' => null,
            'assetId' => null,
            'publicKey' => null,
            'lastSeen' => null,
            'bevent' => null,
            'rssi' => null,
            'cell' => null,
            'beacons' => [],
            'txpower' => null,
            'sensors' => null,
            'stats' => null,
            'inputs' => null,
            'vendorData' => null,
            'vendorName' => null,
            'sensorTimestamp' => null,
            'flags' => null,
            'localName' => null,
            'identity' => null
        ], $values);

        $message->setMac($values['mac']);
        $message->setModel($values['model']);
        $message->setFirmware($values['firmware']);
        $message->setAssetId($values['assetId']);
        $message->setPublicKey($values['publicKey']);
        $message->setLastSeen($values['lastSeen']);
        $message->setBevent($values['bevent']);
        $message->setRssi($values['rssi']);
        $message->setCell($values['cell']);
        $message->setTxpower($values['txpower']);
        $message->setSensors($values['sensors']);
        $message->setStats($values['stats']);
        $message->setInputs($values['inputs']);
        $message->setVendorData($values['vendorData']);
        $message->setVendorName($values['vendorName']);
        $message->setSensorTimestamp($values['sensorTimestamp']);
        $message->setFlags($values['flags']);
        $message->setLocalName($values['localName']);
        $message->setIdentity($values['identity']);

        foreach ($values['deviceClass'] as $item) {
            $message->addDeviceClass($item);
        }

        foreach ($values['beacons'] as $item) {
            $message->addBeacons($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Reported',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'mac',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'deviceClass',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.deviceClassEnum'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'model',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'firmware',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Firmware'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'assetId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'publicKey',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'lastSeen',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'bevent',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.BeaconEvent'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'rssi',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Rssi'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'cell',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Cell'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'beacons',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Beacons'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'txpower',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'sensors',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Sensors'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'stats',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Stats'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'inputs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Inputs'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'vendorData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.VendorData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'vendorName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name' => 'sensorTimestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 21,
                    'name' => 'flags',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name' => 'localName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name' => 'identity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->mac !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->mac);
        }

        if ($this->deviceClass !== null) {
            foreach ($this->deviceClass as $val) {
                $writer->writeVarint($stream, 16);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->model !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->model);
        }

        if ($this->firmware !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->firmware->serializedSize($sizeContext));
            $this->firmware->writeTo($context);
        }

        if ($this->assetId !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->assetId);
        }

        if ($this->publicKey !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->publicKey);
        }

        if ($this->lastSeen !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->lastSeen);
        }

        if ($this->bevent !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->bevent->serializedSize($sizeContext));
            $this->bevent->writeTo($context);
        }

        if ($this->rssi !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->rssi->serializedSize($sizeContext));
            $this->rssi->writeTo($context);
        }

        if ($this->cell !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->cell->serializedSize($sizeContext));
            $this->cell->writeTo($context);
        }

        if ($this->beacons !== null) {
            foreach ($this->beacons as $val) {
                $writer->writeVarint($stream, 98);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->txpower !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeZigzag32($stream, $this->txpower);
        }

        if ($this->sensors !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->sensors->serializedSize($sizeContext));
            $this->sensors->writeTo($context);
        }

        if ($this->stats !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->stats->serializedSize($sizeContext));
            $this->stats->writeTo($context);
        }

        if ($this->inputs !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->inputs->serializedSize($sizeContext));
            $this->inputs->writeTo($context);
        }

        if ($this->vendorData !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeVarint($stream, $this->vendorData->serializedSize($sizeContext));
            $this->vendorData->writeTo($context);
        }

        if ($this->vendorName !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeString($stream, $this->vendorName);
        }

        if ($this->sensorTimestamp !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->sensorTimestamp);
        }

        if ($this->flags !== null) {
            $writer->writeVarint($stream, 168);
            $writer->writeVarint($stream, $this->flags);
        }

        if ($this->localName !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeString($stream, $this->localName);
        }

        if ($this->identity !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeString($stream, $this->identity);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->mac = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->deviceClass === null) {
                    $this->deviceClass = new \Protobuf\EnumCollection();
                }

                $this->deviceClass->add(\aruba_telemetry\deviceClassEnum::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->model = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Firmware();

                $this->firmware = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->assetId = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->publicKey = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->lastSeen = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\BeaconEvent();

                $this->bevent = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Rssi();

                $this->rssi = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Cell();

                $this->cell = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Beacons();

                if ($this->beacons === null) {
                    $this->beacons = new \Protobuf\MessageCollection();
                }

                $this->beacons->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->txpower = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Sensors();

                $this->sensors = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Stats();

                $this->stats = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Inputs();

                $this->inputs = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\VendorData();

                $this->vendorData = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->vendorName = $reader->readString($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sensorTimestamp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->flags = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->localName = $reader->readString($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->identity = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->mac !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->mac);
        }

        if ($this->deviceClass !== null) {
            foreach ($this->deviceClass as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->model !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->model);
        }

        if ($this->firmware !== null) {
            $innerSize = $this->firmware->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->assetId !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->assetId);
        }

        if ($this->publicKey !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->publicKey);
        }

        if ($this->lastSeen !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->lastSeen);
        }

        if ($this->bevent !== null) {
            $innerSize = $this->bevent->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->rssi !== null) {
            $innerSize = $this->rssi->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->cell !== null) {
            $innerSize = $this->cell->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->beacons !== null) {
            foreach ($this->beacons as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->txpower !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->txpower);
        }

        if ($this->sensors !== null) {
            $innerSize = $this->sensors->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->stats !== null) {
            $innerSize = $this->stats->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->inputs !== null) {
            $innerSize = $this->inputs->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->vendorData !== null) {
            $innerSize = $this->vendorData->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->vendorName !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->vendorName);
        }

        if ($this->sensorTimestamp !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->sensorTimestamp);
        }

        if ($this->flags !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->flags);
        }

        if ($this->localName !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->localName);
        }

        if ($this->identity !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->identity);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->mac = null;
        $this->deviceClass = null;
        $this->model = null;
        $this->firmware = null;
        $this->assetId = null;
        $this->publicKey = null;
        $this->lastSeen = null;
        $this->bevent = null;
        $this->rssi = null;
        $this->cell = null;
        $this->beacons = null;
        $this->txpower = null;
        $this->sensors = null;
        $this->stats = null;
        $this->inputs = null;
        $this->vendorData = null;
        $this->vendorName = null;
        $this->sensorTimestamp = null;
        $this->flags = null;
        $this->localName = null;
        $this->identity = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Reported) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->mac = ($message->mac !== null) ? $message->mac : $this->mac;
        $this->deviceClass = ($message->deviceClass !== null) ? $message->deviceClass : $this->deviceClass;
        $this->model = ($message->model !== null) ? $message->model : $this->model;
        $this->firmware = ($message->firmware !== null) ? $message->firmware : $this->firmware;
        $this->assetId = ($message->assetId !== null) ? $message->assetId : $this->assetId;
        $this->publicKey = ($message->publicKey !== null) ? $message->publicKey : $this->publicKey;
        $this->lastSeen = ($message->lastSeen !== null) ? $message->lastSeen : $this->lastSeen;
        $this->bevent = ($message->bevent !== null) ? $message->bevent : $this->bevent;
        $this->rssi = ($message->rssi !== null) ? $message->rssi : $this->rssi;
        $this->cell = ($message->cell !== null) ? $message->cell : $this->cell;
        $this->beacons = ($message->beacons !== null) ? $message->beacons : $this->beacons;
        $this->txpower = ($message->txpower !== null) ? $message->txpower : $this->txpower;
        $this->sensors = ($message->sensors !== null) ? $message->sensors : $this->sensors;
        $this->stats = ($message->stats !== null) ? $message->stats : $this->stats;
        $this->inputs = ($message->inputs !== null) ? $message->inputs : $this->inputs;
        $this->vendorData = ($message->vendorData !== null) ? $message->vendorData : $this->vendorData;
        $this->vendorName = ($message->vendorName !== null) ? $message->vendorName : $this->vendorName;
        $this->sensorTimestamp = ($message->sensorTimestamp !== null) ? $message->sensorTimestamp : $this->sensorTimestamp;
        $this->flags = ($message->flags !== null) ? $message->flags : $this->flags;
        $this->localName = ($message->localName !== null) ? $message->localName : $this->localName;
        $this->identity = ($message->identity !== null) ? $message->identity : $this->identity;
    }


}

