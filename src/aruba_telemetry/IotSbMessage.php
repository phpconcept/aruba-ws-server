<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-sb.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.IotSbMessage
 */
class IotSbMessage extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * meta required message = 1
     *
     * @var \aruba_telemetry\Meta
     */
    protected $meta = null;

    /**
     * receiver optional message = 2
     *
     * @var \aruba_telemetry\Receiver
     */
    protected $receiver = null;

    /**
     * actions repeated message = 3
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Action>
     */
    protected $actions = null;

    /**
     * config optional message = 4
     *
     * @var \aruba_telemetry\TransportConfig
     */
    protected $config = null;

    /**
     * status optional message = 5
     *
     * @var \aruba_telemetry\ConnectStatus
     */
    protected $status = null;

    /**
     * Check if 'meta' has a value
     *
     * @return bool
     */
    public function hasMeta()
    {
        return $this->meta !== null;
    }

    /**
     * Get 'meta' value
     *
     * @return \aruba_telemetry\Meta
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * Set 'meta' value
     *
     * @param \aruba_telemetry\Meta $value
     */
    public function setMeta(\aruba_telemetry\Meta $value)
    {
        $this->meta = $value;
    }

    /**
     * Check if 'receiver' has a value
     *
     * @return bool
     */
    public function hasReceiver()
    {
        return $this->receiver !== null;
    }

    /**
     * Get 'receiver' value
     *
     * @return \aruba_telemetry\Receiver
     */
    public function getReceiver()
    {
        return $this->receiver;
    }

    /**
     * Set 'receiver' value
     *
     * @param \aruba_telemetry\Receiver $value
     */
    public function setReceiver(\aruba_telemetry\Receiver $value = null)
    {
        $this->receiver = $value;
    }

    /**
     * Check if 'actions' has a value
     *
     * @return bool
     */
    public function hasActionsList()
    {
        return $this->actions !== null;
    }

    /**
     * Get 'actions' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Action>
     */
    public function getActionsList()
    {
        return $this->actions;
    }

    /**
     * Set 'actions' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Action> $value
     */
    public function setActionsList(\Protobuf\Collection $value = null)
    {
        $this->actions = $value;
    }

    /**
     * Add a new element to 'actions'
     *
     * @param \aruba_telemetry\Action $value
     */
    public function addActions(\aruba_telemetry\Action $value)
    {
        if ($this->actions === null) {
            $this->actions = new \Protobuf\MessageCollection();
        }

        $this->actions->add($value);
    }

    /**
     * Check if 'config' has a value
     *
     * @return bool
     */
    public function hasConfig()
    {
        return $this->config !== null;
    }

    /**
     * Get 'config' value
     *
     * @return \aruba_telemetry\TransportConfig
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Set 'config' value
     *
     * @param \aruba_telemetry\TransportConfig $value
     */
    public function setConfig(\aruba_telemetry\TransportConfig $value = null)
    {
        $this->config = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return \aruba_telemetry\ConnectStatus
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param \aruba_telemetry\ConnectStatus $value
     */
    public function setStatus(\aruba_telemetry\ConnectStatus $value = null)
    {
        $this->status = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['meta'])) {
            throw new \InvalidArgumentException('Field "meta" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'receiver' => null,
            'actions' => [],
            'config' => null,
            'status' => null
        ], $values);

        $message->setMeta($values['meta']);
        $message->setReceiver($values['receiver']);
        $message->setConfig($values['config']);
        $message->setStatus($values['status']);

        foreach ($values['actions'] as $item) {
            $message->addActions($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'IotSbMessage',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'meta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.aruba_telemetry.Meta'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'receiver',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Receiver'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'actions',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Action'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'config',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.TransportConfig'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ConnectStatus'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->meta === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\IotSbMessage#meta" (tag 1) is required but has no value.');
        }

        if ($this->meta !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->meta->serializedSize($sizeContext));
            $this->meta->writeTo($context);
        }

        if ($this->receiver !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->receiver->serializedSize($sizeContext));
            $this->receiver->writeTo($context);
        }

        if ($this->actions !== null) {
            foreach ($this->actions as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->config !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->config->serializedSize($sizeContext));
            $this->config->writeTo($context);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->status->serializedSize($sizeContext));
            $this->status->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Meta();

                $this->meta = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Receiver();

                $this->receiver = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Action();

                if ($this->actions === null) {
                    $this->actions = new \Protobuf\MessageCollection();
                }

                $this->actions->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\TransportConfig();

                $this->config = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ConnectStatus();

                $this->status = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->meta !== null) {
            $innerSize = $this->meta->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->receiver !== null) {
            $innerSize = $this->receiver->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->actions !== null) {
            foreach ($this->actions as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->config !== null) {
            $innerSize = $this->config->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->status !== null) {
            $innerSize = $this->status->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->meta = null;
        $this->receiver = null;
        $this->actions = null;
        $this->config = null;
        $this->status = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\IotSbMessage) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->meta = ($message->meta !== null) ? $message->meta : $this->meta;
        $this->receiver = ($message->receiver !== null) ? $message->receiver : $this->receiver;
        $this->actions = ($message->actions !== null) ? $message->actions : $this->actions;
        $this->config = ($message->config !== null) ? $message->config : $this->config;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
    }


}

