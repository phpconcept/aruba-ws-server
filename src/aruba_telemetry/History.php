<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.History
 */
class History extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * time required uint64 = 1
     *
     * @var int
     */
    protected $time = null;

    /**
     * rssi required sint32 = 2
     *
     * @var int
     */
    protected $rssi = null;

    /**
     * rxRadioId optional int32 = 3
     *
     * @var int
     */
    protected $rxRadioId = null;

    /**
     * antenna optional int32 = 4
     *
     * @var int
     */
    protected $antenna = null;

    /**
     * Check if 'time' has a value
     *
     * @return bool
     */
    public function hasTime()
    {
        return $this->time !== null;
    }

    /**
     * Get 'time' value
     *
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * Set 'time' value
     *
     * @param int $value
     */
    public function setTime($value)
    {
        $this->time = $value;
    }

    /**
     * Check if 'rssi' has a value
     *
     * @return bool
     */
    public function hasRssi()
    {
        return $this->rssi !== null;
    }

    /**
     * Get 'rssi' value
     *
     * @return int
     */
    public function getRssi()
    {
        return $this->rssi;
    }

    /**
     * Set 'rssi' value
     *
     * @param int $value
     */
    public function setRssi($value)
    {
        $this->rssi = $value;
    }

    /**
     * Check if 'rxRadioId' has a value
     *
     * @return bool
     */
    public function hasRxRadioId()
    {
        return $this->rxRadioId !== null;
    }

    /**
     * Get 'rxRadioId' value
     *
     * @return int
     */
    public function getRxRadioId()
    {
        return $this->rxRadioId;
    }

    /**
     * Set 'rxRadioId' value
     *
     * @param int $value
     */
    public function setRxRadioId($value = null)
    {
        $this->rxRadioId = $value;
    }

    /**
     * Check if 'antenna' has a value
     *
     * @return bool
     */
    public function hasAntenna()
    {
        return $this->antenna !== null;
    }

    /**
     * Get 'antenna' value
     *
     * @return int
     */
    public function getAntenna()
    {
        return $this->antenna;
    }

    /**
     * Set 'antenna' value
     *
     * @param int $value
     */
    public function setAntenna($value = null)
    {
        $this->antenna = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['time'])) {
            throw new \InvalidArgumentException('Field "time" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['rssi'])) {
            throw new \InvalidArgumentException('Field "rssi" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'rxRadioId' => null,
            'antenna' => null
        ], $values);

        $message->setTime($values['time']);
        $message->setRssi($values['rssi']);
        $message->setRxRadioId($values['rxRadioId']);
        $message->setAntenna($values['antenna']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'History',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'rssi',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'rxRadioId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'antenna',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->time === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\History#time" (tag 1) is required but has no value.');
        }

        if ($this->rssi === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\History#rssi" (tag 2) is required but has no value.');
        }

        if ($this->time !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->time);
        }

        if ($this->rssi !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeZigzag32($stream, $this->rssi);
        }

        if ($this->rxRadioId !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->rxRadioId);
        }

        if ($this->antenna !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->antenna);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->rssi = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->rxRadioId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->antenna = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time);
        }

        if ($this->rssi !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->rssi);
        }

        if ($this->rxRadioId !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rxRadioId);
        }

        if ($this->antenna !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->antenna);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->time = null;
        $this->rssi = null;
        $this->rxRadioId = null;
        $this->antenna = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\History) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->time = ($message->time !== null) ? $message->time : $this->time;
        $this->rssi = ($message->rssi !== null) ? $message->rssi : $this->rssi;
        $this->rxRadioId = ($message->rxRadioId !== null) ? $message->rxRadioId : $this->rxRadioId;
        $this->antenna = ($message->antenna !== null) ? $message->antenna : $this->antenna;
    }


}

