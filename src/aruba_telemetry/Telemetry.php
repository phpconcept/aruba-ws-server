<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Telemetry
 */
class Telemetry extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * meta required message = 1
     *
     * @var \aruba_telemetry\Meta
     */
    protected $meta = null;

    /**
     * reporter required message = 2
     *
     * @var \aruba_telemetry\Reporter
     */
    protected $reporter = null;

    /**
     * reported repeated message = 3
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Reported>
     */
    protected $reported = null;

    /**
     * results repeated message = 4
     *
     * @var \Protobuf\Collection<\aruba_telemetry\ActionResult>
     */
    protected $results = null;

    /**
     * characteristics repeated message = 5
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Characteristic>
     */
    protected $characteristics = null;

    /**
     * bleData repeated message = 6
     *
     * @var \Protobuf\Collection<\aruba_telemetry\BleData>
     */
    protected $bleData = null;

    /**
     * wifiData repeated message = 7
     *
     * @var \Protobuf\Collection<\aruba_telemetry\WiFiData>
     */
    protected $wifiData = null;

    /**
     * devCount optional message = 8
     *
     * @var \aruba_telemetry\DeviceCount
     */
    protected $devCount = null;

    /**
     * status optional message = 9
     *
     * @var \aruba_telemetry\Status
     */
    protected $status = null;

    /**
     * zigbee optional message = 10
     *
     * @var \aruba_telemetry\NbZbMsg
     */
    protected $zigbee = null;

    /**
     * nbSData repeated message = 11
     *
     * @var \Protobuf\Collection<\aruba_telemetry\NbSerialData>
     */
    protected $nbSData = null;

    /**
     * apHealth optional message = 12
     *
     * @var \aruba_telemetry\ApHealthUpdate
     */
    protected $apHealth = null;

    /**
     * Check if 'meta' has a value
     *
     * @return bool
     */
    public function hasMeta()
    {
        return $this->meta !== null;
    }

    /**
     * Get 'meta' value
     *
     * @return \aruba_telemetry\Meta
     */
    public function getMeta()
    {
        return $this->meta;
    }

    /**
     * Set 'meta' value
     *
     * @param \aruba_telemetry\Meta $value
     */
    public function setMeta(\aruba_telemetry\Meta $value)
    {
        $this->meta = $value;
    }

    /**
     * Check if 'reporter' has a value
     *
     * @return bool
     */
    public function hasReporter()
    {
        return $this->reporter !== null;
    }

    /**
     * Get 'reporter' value
     *
     * @return \aruba_telemetry\Reporter
     */
    public function getReporter()
    {
        return $this->reporter;
    }

    /**
     * Set 'reporter' value
     *
     * @param \aruba_telemetry\Reporter $value
     */
    public function setReporter(\aruba_telemetry\Reporter $value)
    {
        $this->reporter = $value;
    }

    /**
     * Check if 'reported' has a value
     *
     * @return bool
     */
    public function hasReportedList()
    {
        return $this->reported !== null;
    }

    /**
     * Get 'reported' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Reported>
     */
    public function getReportedList()
    {
        return $this->reported;
    }

    /**
     * Set 'reported' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Reported> $value
     */
    public function setReportedList(\Protobuf\Collection $value = null)
    {
        $this->reported = $value;
    }

    /**
     * Add a new element to 'reported'
     *
     * @param \aruba_telemetry\Reported $value
     */
    public function addReported(\aruba_telemetry\Reported $value)
    {
        if ($this->reported === null) {
            $this->reported = new \Protobuf\MessageCollection();
        }

        $this->reported->add($value);
    }

    /**
     * Check if 'results' has a value
     *
     * @return bool
     */
    public function hasResultsList()
    {
        return $this->results !== null;
    }

    /**
     * Get 'results' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\ActionResult>
     */
    public function getResultsList()
    {
        return $this->results;
    }

    /**
     * Set 'results' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\ActionResult> $value
     */
    public function setResultsList(\Protobuf\Collection $value = null)
    {
        $this->results = $value;
    }

    /**
     * Add a new element to 'results'
     *
     * @param \aruba_telemetry\ActionResult $value
     */
    public function addResults(\aruba_telemetry\ActionResult $value)
    {
        if ($this->results === null) {
            $this->results = new \Protobuf\MessageCollection();
        }

        $this->results->add($value);
    }

    /**
     * Check if 'characteristics' has a value
     *
     * @return bool
     */
    public function hasCharacteristicsList()
    {
        return $this->characteristics !== null;
    }

    /**
     * Get 'characteristics' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Characteristic>
     */
    public function getCharacteristicsList()
    {
        return $this->characteristics;
    }

    /**
     * Set 'characteristics' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Characteristic> $value
     */
    public function setCharacteristicsList(\Protobuf\Collection $value = null)
    {
        $this->characteristics = $value;
    }

    /**
     * Add a new element to 'characteristics'
     *
     * @param \aruba_telemetry\Characteristic $value
     */
    public function addCharacteristics(\aruba_telemetry\Characteristic $value)
    {
        if ($this->characteristics === null) {
            $this->characteristics = new \Protobuf\MessageCollection();
        }

        $this->characteristics->add($value);
    }

    /**
     * Check if 'bleData' has a value
     *
     * @return bool
     */
    public function hasBleDataList()
    {
        return $this->bleData !== null;
    }

    /**
     * Get 'bleData' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\BleData>
     */
    public function getBleDataList()
    {
        return $this->bleData;
    }

    /**
     * Set 'bleData' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\BleData> $value
     */
    public function setBleDataList(\Protobuf\Collection $value = null)
    {
        $this->bleData = $value;
    }

    /**
     * Add a new element to 'bleData'
     *
     * @param \aruba_telemetry\BleData $value
     */
    public function addBleData(\aruba_telemetry\BleData $value)
    {
        if ($this->bleData === null) {
            $this->bleData = new \Protobuf\MessageCollection();
        }

        $this->bleData->add($value);
    }

    /**
     * Check if 'wifiData' has a value
     *
     * @return bool
     */
    public function hasWifiDataList()
    {
        return $this->wifiData !== null;
    }

    /**
     * Get 'wifiData' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\WiFiData>
     */
    public function getWifiDataList()
    {
        return $this->wifiData;
    }

    /**
     * Set 'wifiData' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\WiFiData> $value
     */
    public function setWifiDataList(\Protobuf\Collection $value = null)
    {
        $this->wifiData = $value;
    }

    /**
     * Add a new element to 'wifiData'
     *
     * @param \aruba_telemetry\WiFiData $value
     */
    public function addWifiData(\aruba_telemetry\WiFiData $value)
    {
        if ($this->wifiData === null) {
            $this->wifiData = new \Protobuf\MessageCollection();
        }

        $this->wifiData->add($value);
    }

    /**
     * Check if 'devCount' has a value
     *
     * @return bool
     */
    public function hasDevCount()
    {
        return $this->devCount !== null;
    }

    /**
     * Get 'devCount' value
     *
     * @return \aruba_telemetry\DeviceCount
     */
    public function getDevCount()
    {
        return $this->devCount;
    }

    /**
     * Set 'devCount' value
     *
     * @param \aruba_telemetry\DeviceCount $value
     */
    public function setDevCount(\aruba_telemetry\DeviceCount $value = null)
    {
        $this->devCount = $value;
    }

    /**
     * Check if 'status' has a value
     *
     * @return bool
     */
    public function hasStatus()
    {
        return $this->status !== null;
    }

    /**
     * Get 'status' value
     *
     * @return \aruba_telemetry\Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set 'status' value
     *
     * @param \aruba_telemetry\Status $value
     */
    public function setStatus(\aruba_telemetry\Status $value = null)
    {
        $this->status = $value;
    }

    /**
     * Check if 'zigbee' has a value
     *
     * @return bool
     */
    public function hasZigbee()
    {
        return $this->zigbee !== null;
    }

    /**
     * Get 'zigbee' value
     *
     * @return \aruba_telemetry\NbZbMsg
     */
    public function getZigbee()
    {
        return $this->zigbee;
    }

    /**
     * Set 'zigbee' value
     *
     * @param \aruba_telemetry\NbZbMsg $value
     */
    public function setZigbee(\aruba_telemetry\NbZbMsg $value = null)
    {
        $this->zigbee = $value;
    }

    /**
     * Check if 'nbSData' has a value
     *
     * @return bool
     */
    public function hasNbSDataList()
    {
        return $this->nbSData !== null;
    }

    /**
     * Get 'nbSData' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\NbSerialData>
     */
    public function getNbSDataList()
    {
        return $this->nbSData;
    }

    /**
     * Set 'nbSData' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\NbSerialData> $value
     */
    public function setNbSDataList(\Protobuf\Collection $value = null)
    {
        $this->nbSData = $value;
    }

    /**
     * Add a new element to 'nbSData'
     *
     * @param \aruba_telemetry\NbSerialData $value
     */
    public function addNbSData(\aruba_telemetry\NbSerialData $value)
    {
        if ($this->nbSData === null) {
            $this->nbSData = new \Protobuf\MessageCollection();
        }

        $this->nbSData->add($value);
    }

    /**
     * Check if 'apHealth' has a value
     *
     * @return bool
     */
    public function hasApHealth()
    {
        return $this->apHealth !== null;
    }

    /**
     * Get 'apHealth' value
     *
     * @return \aruba_telemetry\ApHealthUpdate
     */
    public function getApHealth()
    {
        return $this->apHealth;
    }

    /**
     * Set 'apHealth' value
     *
     * @param \aruba_telemetry\ApHealthUpdate $value
     */
    public function setApHealth(\aruba_telemetry\ApHealthUpdate $value = null)
    {
        $this->apHealth = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['meta'])) {
            throw new \InvalidArgumentException('Field "meta" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['reporter'])) {
            throw new \InvalidArgumentException('Field "reporter" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'reported' => [],
            'results' => [],
            'characteristics' => [],
            'bleData' => [],
            'wifiData' => [],
            'devCount' => null,
            'status' => null,
            'zigbee' => null,
            'nbSData' => [],
            'apHealth' => null
        ], $values);

        $message->setMeta($values['meta']);
        $message->setReporter($values['reporter']);
        $message->setDevCount($values['devCount']);
        $message->setStatus($values['status']);
        $message->setZigbee($values['zigbee']);
        $message->setApHealth($values['apHealth']);

        foreach ($values['reported'] as $item) {
            $message->addReported($item);
        }

        foreach ($values['results'] as $item) {
            $message->addResults($item);
        }

        foreach ($values['characteristics'] as $item) {
            $message->addCharacteristics($item);
        }

        foreach ($values['bleData'] as $item) {
            $message->addBleData($item);
        }

        foreach ($values['wifiData'] as $item) {
            $message->addWifiData($item);
        }

        foreach ($values['nbSData'] as $item) {
            $message->addNbSData($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Telemetry',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'meta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.aruba_telemetry.Meta'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'reporter',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.aruba_telemetry.Reporter'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'reported',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Reported'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'results',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.ActionResult'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'characteristics',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Characteristic'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'bleData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.BleData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'wifiData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.WiFiData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'devCount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.DeviceCount'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'status',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Status'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'zigbee',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.NbZbMsg'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'nbSData',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.NbSerialData'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'apHealth',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ApHealthUpdate'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->meta === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Telemetry#meta" (tag 1) is required but has no value.');
        }

        if ($this->reporter === null) {
            throw new \UnexpectedValueException('Field "\\aruba_telemetry\\Telemetry#reporter" (tag 2) is required but has no value.');
        }

        if ($this->meta !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->meta->serializedSize($sizeContext));
            $this->meta->writeTo($context);
        }

        if ($this->reporter !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->reporter->serializedSize($sizeContext));
            $this->reporter->writeTo($context);
        }

        if ($this->reported !== null) {
            foreach ($this->reported as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->results !== null) {
            foreach ($this->results as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->characteristics !== null) {
            foreach ($this->characteristics as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->bleData !== null) {
            foreach ($this->bleData as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->wifiData !== null) {
            foreach ($this->wifiData as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->devCount !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->devCount->serializedSize($sizeContext));
            $this->devCount->writeTo($context);
        }

        if ($this->status !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->status->serializedSize($sizeContext));
            $this->status->writeTo($context);
        }

        if ($this->zigbee !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->zigbee->serializedSize($sizeContext));
            $this->zigbee->writeTo($context);
        }

        if ($this->nbSData !== null) {
            foreach ($this->nbSData as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->apHealth !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->apHealth->serializedSize($sizeContext));
            $this->apHealth->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Meta();

                $this->meta = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Reporter();

                $this->reporter = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Reported();

                if ($this->reported === null) {
                    $this->reported = new \Protobuf\MessageCollection();
                }

                $this->reported->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ActionResult();

                if ($this->results === null) {
                    $this->results = new \Protobuf\MessageCollection();
                }

                $this->results->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Characteristic();

                if ($this->characteristics === null) {
                    $this->characteristics = new \Protobuf\MessageCollection();
                }

                $this->characteristics->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\BleData();

                if ($this->bleData === null) {
                    $this->bleData = new \Protobuf\MessageCollection();
                }

                $this->bleData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\WiFiData();

                if ($this->wifiData === null) {
                    $this->wifiData = new \Protobuf\MessageCollection();
                }

                $this->wifiData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\DeviceCount();

                $this->devCount = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Status();

                $this->status = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\NbZbMsg();

                $this->zigbee = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\NbSerialData();

                if ($this->nbSData === null) {
                    $this->nbSData = new \Protobuf\MessageCollection();
                }

                $this->nbSData->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ApHealthUpdate();

                $this->apHealth = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->meta !== null) {
            $innerSize = $this->meta->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->reporter !== null) {
            $innerSize = $this->reporter->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->reported !== null) {
            foreach ($this->reported as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->results !== null) {
            foreach ($this->results as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->characteristics !== null) {
            foreach ($this->characteristics as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->bleData !== null) {
            foreach ($this->bleData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->wifiData !== null) {
            foreach ($this->wifiData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->devCount !== null) {
            $innerSize = $this->devCount->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->status !== null) {
            $innerSize = $this->status->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->zigbee !== null) {
            $innerSize = $this->zigbee->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->nbSData !== null) {
            foreach ($this->nbSData as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->apHealth !== null) {
            $innerSize = $this->apHealth->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->meta = null;
        $this->reporter = null;
        $this->reported = null;
        $this->results = null;
        $this->characteristics = null;
        $this->bleData = null;
        $this->wifiData = null;
        $this->devCount = null;
        $this->status = null;
        $this->zigbee = null;
        $this->nbSData = null;
        $this->apHealth = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Telemetry) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->meta = ($message->meta !== null) ? $message->meta : $this->meta;
        $this->reporter = ($message->reporter !== null) ? $message->reporter : $this->reporter;
        $this->reported = ($message->reported !== null) ? $message->reported : $this->reported;
        $this->results = ($message->results !== null) ? $message->results : $this->results;
        $this->characteristics = ($message->characteristics !== null) ? $message->characteristics : $this->characteristics;
        $this->bleData = ($message->bleData !== null) ? $message->bleData : $this->bleData;
        $this->wifiData = ($message->wifiData !== null) ? $message->wifiData : $this->wifiData;
        $this->devCount = ($message->devCount !== null) ? $message->devCount : $this->devCount;
        $this->status = ($message->status !== null) ? $message->status : $this->status;
        $this->zigbee = ($message->zigbee !== null) ? $message->zigbee : $this->zigbee;
        $this->nbSData = ($message->nbSData !== null) ? $message->nbSData : $this->nbSData;
        $this->apHealth = ($message->apHealth !== null) ? $message->apHealth : $this->apHealth;
    }


}

