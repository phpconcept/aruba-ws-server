<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-telemetry.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Sensors
 */
class Sensors extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * accelerometer optional message = 1
     *
     * @var \aruba_telemetry\Accelerometer
     */
    protected $accelerometer = null;

    /**
     * battery optional int32 = 2
     *
     * @var int
     */
    protected $battery = null;

    /**
     * temperatureC optional float = 3
     *
     * @var float
     */
    protected $temperatureC = null;

    /**
     * humidity optional int32 = 4
     *
     * @var int
     */
    protected $humidity = null;

    /**
     * voltage optional float = 5
     *
     * @var float
     */
    protected $voltage = null;

    /**
     * illumination optional int32 = 6
     *
     * @var int
     */
    protected $illumination = null;

    /**
     * motion optional bool = 7
     *
     * @var bool
     */
    protected $motion = null;

    /**
     * current optional sint32 = 8
     *
     * @var int
     */
    protected $current = null;

    /**
     * CO optional int32 = 9
     *
     * @var int
     */
    protected $CO = null;

    /**
     * CO2 optional int32 = 10
     *
     * @var int
     */
    protected $CO2 = null;

    /**
     * VOC optional int32 = 11
     *
     * @var int
     */
    protected $VOC = null;

    /**
     * resistance optional float = 12
     *
     * @var float
     */
    protected $resistance = null;

    /**
     * pressure optional sint32 = 13
     *
     * @var int
     */
    protected $pressure = null;

    /**
     * alarm repeated enum = 14
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Alarm>
     */
    protected $alarm = null;

    /**
     * contact repeated message = 15
     *
     * @var \Protobuf\Collection<\aruba_telemetry\Contact>
     */
    protected $contact = null;

    /**
     * occupancy optional message = 16
     *
     * @var \aruba_telemetry\Occupancy
     */
    protected $occupancy = null;

    /**
     * mechanicalHandle optional enum = 17
     *
     * @var \aruba_telemetry\MechanicalH
     */
    protected $mechanicalHandle = null;

    /**
     * distance optional int32 = 18
     *
     * @var int
     */
    protected $distance = null;

    /**
     * capacitance optional float = 19
     *
     * @var float
     */
    protected $capacitance = null;

    /**
     * Check if 'accelerometer' has a value
     *
     * @return bool
     */
    public function hasAccelerometer()
    {
        return $this->accelerometer !== null;
    }

    /**
     * Get 'accelerometer' value
     *
     * @return \aruba_telemetry\Accelerometer
     */
    public function getAccelerometer()
    {
        return $this->accelerometer;
    }

    /**
     * Set 'accelerometer' value
     *
     * @param \aruba_telemetry\Accelerometer $value
     */
    public function setAccelerometer(\aruba_telemetry\Accelerometer $value = null)
    {
        $this->accelerometer = $value;
    }

    /**
     * Check if 'battery' has a value
     *
     * @return bool
     */
    public function hasBattery()
    {
        return $this->battery !== null;
    }

    /**
     * Get 'battery' value
     *
     * @return int
     */
    public function getBattery()
    {
        return $this->battery;
    }

    /**
     * Set 'battery' value
     *
     * @param int $value
     */
    public function setBattery($value = null)
    {
        $this->battery = $value;
    }

    /**
     * Check if 'temperatureC' has a value
     *
     * @return bool
     */
    public function hasTemperatureC()
    {
        return $this->temperatureC !== null;
    }

    /**
     * Get 'temperatureC' value
     *
     * @return float
     */
    public function getTemperatureC()
    {
        return $this->temperatureC;
    }

    /**
     * Set 'temperatureC' value
     *
     * @param float $value
     */
    public function setTemperatureC($value = null)
    {
        $this->temperatureC = $value;
    }

    /**
     * Check if 'humidity' has a value
     *
     * @return bool
     */
    public function hasHumidity()
    {
        return $this->humidity !== null;
    }

    /**
     * Get 'humidity' value
     *
     * @return int
     */
    public function getHumidity()
    {
        return $this->humidity;
    }

    /**
     * Set 'humidity' value
     *
     * @param int $value
     */
    public function setHumidity($value = null)
    {
        $this->humidity = $value;
    }

    /**
     * Check if 'voltage' has a value
     *
     * @return bool
     */
    public function hasVoltage()
    {
        return $this->voltage !== null;
    }

    /**
     * Get 'voltage' value
     *
     * @return float
     */
    public function getVoltage()
    {
        return $this->voltage;
    }

    /**
     * Set 'voltage' value
     *
     * @param float $value
     */
    public function setVoltage($value = null)
    {
        $this->voltage = $value;
    }

    /**
     * Check if 'illumination' has a value
     *
     * @return bool
     */
    public function hasIllumination()
    {
        return $this->illumination !== null;
    }

    /**
     * Get 'illumination' value
     *
     * @return int
     */
    public function getIllumination()
    {
        return $this->illumination;
    }

    /**
     * Set 'illumination' value
     *
     * @param int $value
     */
    public function setIllumination($value = null)
    {
        $this->illumination = $value;
    }

    /**
     * Check if 'motion' has a value
     *
     * @return bool
     */
    public function hasMotion()
    {
        return $this->motion !== null;
    }

    /**
     * Get 'motion' value
     *
     * @return bool
     */
    public function getMotion()
    {
        return $this->motion;
    }

    /**
     * Set 'motion' value
     *
     * @param bool $value
     */
    public function setMotion($value = null)
    {
        $this->motion = $value;
    }

    /**
     * Check if 'current' has a value
     *
     * @return bool
     */
    public function hasCurrent()
    {
        return $this->current !== null;
    }

    /**
     * Get 'current' value
     *
     * @return int
     */
    public function getCurrent()
    {
        return $this->current;
    }

    /**
     * Set 'current' value
     *
     * @param int $value
     */
    public function setCurrent($value = null)
    {
        $this->current = $value;
    }

    /**
     * Check if 'CO' has a value
     *
     * @return bool
     */
    public function hasCO()
    {
        return $this->CO !== null;
    }

    /**
     * Get 'CO' value
     *
     * @return int
     */
    public function getCO()
    {
        return $this->CO;
    }

    /**
     * Set 'CO' value
     *
     * @param int $value
     */
    public function setCO($value = null)
    {
        $this->CO = $value;
    }

    /**
     * Check if 'CO2' has a value
     *
     * @return bool
     */
    public function hasCO2()
    {
        return $this->CO2 !== null;
    }

    /**
     * Get 'CO2' value
     *
     * @return int
     */
    public function getCO2()
    {
        return $this->CO2;
    }

    /**
     * Set 'CO2' value
     *
     * @param int $value
     */
    public function setCO2($value = null)
    {
        $this->CO2 = $value;
    }

    /**
     * Check if 'VOC' has a value
     *
     * @return bool
     */
    public function hasVOC()
    {
        return $this->VOC !== null;
    }

    /**
     * Get 'VOC' value
     *
     * @return int
     */
    public function getVOC()
    {
        return $this->VOC;
    }

    /**
     * Set 'VOC' value
     *
     * @param int $value
     */
    public function setVOC($value = null)
    {
        $this->VOC = $value;
    }

    /**
     * Check if 'resistance' has a value
     *
     * @return bool
     */
    public function hasResistance()
    {
        return $this->resistance !== null;
    }

    /**
     * Get 'resistance' value
     *
     * @return float
     */
    public function getResistance()
    {
        return $this->resistance;
    }

    /**
     * Set 'resistance' value
     *
     * @param float $value
     */
    public function setResistance($value = null)
    {
        $this->resistance = $value;
    }

    /**
     * Check if 'pressure' has a value
     *
     * @return bool
     */
    public function hasPressure()
    {
        return $this->pressure !== null;
    }

    /**
     * Get 'pressure' value
     *
     * @return int
     */
    public function getPressure()
    {
        return $this->pressure;
    }

    /**
     * Set 'pressure' value
     *
     * @param int $value
     */
    public function setPressure($value = null)
    {
        $this->pressure = $value;
    }

    /**
     * Check if 'alarm' has a value
     *
     * @return bool
     */
    public function hasAlarmList()
    {
        return $this->alarm !== null;
    }

    /**
     * Get 'alarm' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Alarm>
     */
    public function getAlarmList()
    {
        return $this->alarm;
    }

    /**
     * Set 'alarm' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Alarm> $value
     */
    public function setAlarmList(\Protobuf\Collection $value = null)
    {
        $this->alarm = $value;
    }

    /**
     * Add a new element to 'alarm'
     *
     * @param \aruba_telemetry\Alarm $value
     */
    public function addAlarm(\aruba_telemetry\Alarm $value)
    {
        if ($this->alarm === null) {
            $this->alarm = new \Protobuf\EnumCollection();
        }

        $this->alarm->add($value);
    }

    /**
     * Check if 'contact' has a value
     *
     * @return bool
     */
    public function hasContactList()
    {
        return $this->contact !== null;
    }

    /**
     * Get 'contact' value
     *
     * @return \Protobuf\Collection<\aruba_telemetry\Contact>
     */
    public function getContactList()
    {
        return $this->contact;
    }

    /**
     * Set 'contact' value
     *
     * @param \Protobuf\Collection<\aruba_telemetry\Contact> $value
     */
    public function setContactList(\Protobuf\Collection $value = null)
    {
        $this->contact = $value;
    }

    /**
     * Add a new element to 'contact'
     *
     * @param \aruba_telemetry\Contact $value
     */
    public function addContact(\aruba_telemetry\Contact $value)
    {
        if ($this->contact === null) {
            $this->contact = new \Protobuf\MessageCollection();
        }

        $this->contact->add($value);
    }

    /**
     * Check if 'occupancy' has a value
     *
     * @return bool
     */
    public function hasOccupancy()
    {
        return $this->occupancy !== null;
    }

    /**
     * Get 'occupancy' value
     *
     * @return \aruba_telemetry\Occupancy
     */
    public function getOccupancy()
    {
        return $this->occupancy;
    }

    /**
     * Set 'occupancy' value
     *
     * @param \aruba_telemetry\Occupancy $value
     */
    public function setOccupancy(\aruba_telemetry\Occupancy $value = null)
    {
        $this->occupancy = $value;
    }

    /**
     * Check if 'mechanicalHandle' has a value
     *
     * @return bool
     */
    public function hasMechanicalHandle()
    {
        return $this->mechanicalHandle !== null;
    }

    /**
     * Get 'mechanicalHandle' value
     *
     * @return \aruba_telemetry\MechanicalH
     */
    public function getMechanicalHandle()
    {
        return $this->mechanicalHandle;
    }

    /**
     * Set 'mechanicalHandle' value
     *
     * @param \aruba_telemetry\MechanicalH $value
     */
    public function setMechanicalHandle(\aruba_telemetry\MechanicalH $value = null)
    {
        $this->mechanicalHandle = $value;
    }

    /**
     * Check if 'distance' has a value
     *
     * @return bool
     */
    public function hasDistance()
    {
        return $this->distance !== null;
    }

    /**
     * Get 'distance' value
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->distance;
    }

    /**
     * Set 'distance' value
     *
     * @param int $value
     */
    public function setDistance($value = null)
    {
        $this->distance = $value;
    }

    /**
     * Check if 'capacitance' has a value
     *
     * @return bool
     */
    public function hasCapacitance()
    {
        return $this->capacitance !== null;
    }

    /**
     * Get 'capacitance' value
     *
     * @return float
     */
    public function getCapacitance()
    {
        return $this->capacitance;
    }

    /**
     * Set 'capacitance' value
     *
     * @param float $value
     */
    public function setCapacitance($value = null)
    {
        $this->capacitance = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'accelerometer' => null,
            'battery' => null,
            'temperatureC' => null,
            'humidity' => null,
            'voltage' => null,
            'illumination' => null,
            'motion' => null,
            'current' => null,
            'CO' => null,
            'CO2' => null,
            'VOC' => null,
            'resistance' => null,
            'pressure' => null,
            'alarm' => [],
            'contact' => [],
            'occupancy' => null,
            'mechanicalHandle' => null,
            'distance' => null,
            'capacitance' => null
        ], $values);

        $message->setAccelerometer($values['accelerometer']);
        $message->setBattery($values['battery']);
        $message->setTemperatureC($values['temperatureC']);
        $message->setHumidity($values['humidity']);
        $message->setVoltage($values['voltage']);
        $message->setIllumination($values['illumination']);
        $message->setMotion($values['motion']);
        $message->setCurrent($values['current']);
        $message->setCO($values['CO']);
        $message->setCO2($values['CO2']);
        $message->setVOC($values['VOC']);
        $message->setResistance($values['resistance']);
        $message->setPressure($values['pressure']);
        $message->setOccupancy($values['occupancy']);
        $message->setMechanicalHandle($values['mechanicalHandle']);
        $message->setDistance($values['distance']);
        $message->setCapacitance($values['capacitance']);

        foreach ($values['alarm'] as $item) {
            $message->addAlarm($item);
        }

        foreach ($values['contact'] as $item) {
            $message->addContact($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Sensors',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'accelerometer',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Accelerometer'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'battery',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'temperatureC',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'humidity',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'voltage',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'illumination',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'motion',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'current',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'CO',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'CO2',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'VOC',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'resistance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name' => 'pressure',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_SINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name' => 'alarm',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Alarm'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name' => 'contact',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.aruba_telemetry.Contact'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name' => 'occupancy',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.Occupancy'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 17,
                    'name' => 'mechanicalHandle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.MechanicalH'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name' => 'distance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name' => 'capacitance',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_FLOAT(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->accelerometer !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->accelerometer->serializedSize($sizeContext));
            $this->accelerometer->writeTo($context);
        }

        if ($this->battery !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->battery);
        }

        if ($this->temperatureC !== null) {
            $writer->writeVarint($stream, 29);
            $writer->writeFloat($stream, $this->temperatureC);
        }

        if ($this->humidity !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->humidity);
        }

        if ($this->voltage !== null) {
            $writer->writeVarint($stream, 45);
            $writer->writeFloat($stream, $this->voltage);
        }

        if ($this->illumination !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->illumination);
        }

        if ($this->motion !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->motion);
        }

        if ($this->current !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeZigzag32($stream, $this->current);
        }

        if ($this->CO !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->CO);
        }

        if ($this->CO2 !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->CO2);
        }

        if ($this->VOC !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->VOC);
        }

        if ($this->resistance !== null) {
            $writer->writeVarint($stream, 101);
            $writer->writeFloat($stream, $this->resistance);
        }

        if ($this->pressure !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeZigzag32($stream, $this->pressure);
        }

        if ($this->alarm !== null) {
            foreach ($this->alarm as $val) {
                $writer->writeVarint($stream, 112);
                $writer->writeVarint($stream, $val->value());
            }
        }

        if ($this->contact !== null) {
            foreach ($this->contact as $val) {
                $writer->writeVarint($stream, 122);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->occupancy !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->occupancy->serializedSize($sizeContext));
            $this->occupancy->writeTo($context);
        }

        if ($this->mechanicalHandle !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeVarint($stream, $this->mechanicalHandle->value());
        }

        if ($this->distance !== null) {
            $writer->writeVarint($stream, 144);
            $writer->writeVarint($stream, $this->distance);
        }

        if ($this->capacitance !== null) {
            $writer->writeVarint($stream, 157);
            $writer->writeFloat($stream, $this->capacitance);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Accelerometer();

                $this->accelerometer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->battery = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->temperatureC = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->humidity = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->voltage = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->illumination = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->motion = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->current = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->CO = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->CO2 = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->VOC = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->resistance = $reader->readFloat($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 17);

                $this->pressure = $reader->readZigzag($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                if ($this->alarm === null) {
                    $this->alarm = new \Protobuf\EnumCollection();
                }

                $this->alarm->add(\aruba_telemetry\Alarm::valueOf($reader->readVarint($stream)));

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Contact();

                if ($this->contact === null) {
                    $this->contact = new \Protobuf\MessageCollection();
                }

                $this->contact->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\Occupancy();

                $this->occupancy = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->mechanicalHandle = \aruba_telemetry\MechanicalH::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->distance = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 2);

                $this->capacitance = $reader->readFloat($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->accelerometer !== null) {
            $innerSize = $this->accelerometer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->battery !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->battery);
        }

        if ($this->temperatureC !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->humidity !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->humidity);
        }

        if ($this->voltage !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->illumination !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->illumination);
        }

        if ($this->motion !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->current !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->current);
        }

        if ($this->CO !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->CO);
        }

        if ($this->CO2 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->CO2);
        }

        if ($this->VOC !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->VOC);
        }

        if ($this->resistance !== null) {
            $size += 1;
            $size += 4;
        }

        if ($this->pressure !== null) {
            $size += 1;
            $size += $calculator->computeZigzag32Size($this->pressure);
        }

        if ($this->alarm !== null) {
            foreach ($this->alarm as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val->value());
            }
        }

        if ($this->contact !== null) {
            foreach ($this->contact as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->occupancy !== null) {
            $innerSize = $this->occupancy->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->mechanicalHandle !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->mechanicalHandle->value());
        }

        if ($this->distance !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->distance);
        }

        if ($this->capacitance !== null) {
            $size += 2;
            $size += 4;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->accelerometer = null;
        $this->battery = null;
        $this->temperatureC = null;
        $this->humidity = null;
        $this->voltage = null;
        $this->illumination = null;
        $this->motion = null;
        $this->current = null;
        $this->CO = null;
        $this->CO2 = null;
        $this->VOC = null;
        $this->resistance = null;
        $this->pressure = null;
        $this->alarm = null;
        $this->contact = null;
        $this->occupancy = null;
        $this->mechanicalHandle = null;
        $this->distance = null;
        $this->capacitance = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Sensors) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->accelerometer = ($message->accelerometer !== null) ? $message->accelerometer : $this->accelerometer;
        $this->battery = ($message->battery !== null) ? $message->battery : $this->battery;
        $this->temperatureC = ($message->temperatureC !== null) ? $message->temperatureC : $this->temperatureC;
        $this->humidity = ($message->humidity !== null) ? $message->humidity : $this->humidity;
        $this->voltage = ($message->voltage !== null) ? $message->voltage : $this->voltage;
        $this->illumination = ($message->illumination !== null) ? $message->illumination : $this->illumination;
        $this->motion = ($message->motion !== null) ? $message->motion : $this->motion;
        $this->current = ($message->current !== null) ? $message->current : $this->current;
        $this->CO = ($message->CO !== null) ? $message->CO : $this->CO;
        $this->CO2 = ($message->CO2 !== null) ? $message->CO2 : $this->CO2;
        $this->VOC = ($message->VOC !== null) ? $message->VOC : $this->VOC;
        $this->resistance = ($message->resistance !== null) ? $message->resistance : $this->resistance;
        $this->pressure = ($message->pressure !== null) ? $message->pressure : $this->pressure;
        $this->alarm = ($message->alarm !== null) ? $message->alarm : $this->alarm;
        $this->contact = ($message->contact !== null) ? $message->contact : $this->contact;
        $this->occupancy = ($message->occupancy !== null) ? $message->occupancy : $this->occupancy;
        $this->mechanicalHandle = ($message->mechanicalHandle !== null) ? $message->mechanicalHandle : $this->mechanicalHandle;
        $this->distance = ($message->distance !== null) ? $message->distance : $this->distance;
        $this->capacitance = ($message->capacitance !== null) ? $message->capacitance : $this->capacitance;
    }


}

