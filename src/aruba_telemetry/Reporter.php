<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.Reporter
 */
class Reporter extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * name optional string = 1
     *
     * @var string
     */
    protected $name = null;

    /**
     * mac optional bytes = 2
     *
     * @var \Protobuf\Stream
     */
    protected $mac = null;

    /**
     * ipv4 optional string = 3
     *
     * @var string
     */
    protected $ipv4 = null;

    /**
     * ipv6 optional string = 4
     *
     * @var string
     */
    protected $ipv6 = null;

    /**
     * hwType optional string = 5
     *
     * @var string
     */
    protected $hwType = null;

    /**
     * swVersion optional string = 6
     *
     * @var string
     */
    protected $swVersion = null;

    /**
     * swBuild optional string = 7
     *
     * @var string
     */
    protected $swBuild = null;

    /**
     * time optional uint64 = 8
     *
     * @var int
     */
    protected $time = null;

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value = null)
    {
        $this->name = $value;
    }

    /**
     * Check if 'mac' has a value
     *
     * @return bool
     */
    public function hasMac()
    {
        return $this->mac !== null;
    }

    /**
     * Get 'mac' value
     *
     * @return \Protobuf\Stream
     */
    public function getMac()
    {
        return $this->mac;
    }

    /**
     * Set 'mac' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setMac($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->mac = $value;
    }

    /**
     * Check if 'ipv4' has a value
     *
     * @return bool
     */
    public function hasIpv4()
    {
        return $this->ipv4 !== null;
    }

    /**
     * Get 'ipv4' value
     *
     * @return string
     */
    public function getIpv4()
    {
        return $this->ipv4;
    }

    /**
     * Set 'ipv4' value
     *
     * @param string $value
     */
    public function setIpv4($value = null)
    {
        $this->ipv4 = $value;
    }

    /**
     * Check if 'ipv6' has a value
     *
     * @return bool
     */
    public function hasIpv6()
    {
        return $this->ipv6 !== null;
    }

    /**
     * Get 'ipv6' value
     *
     * @return string
     */
    public function getIpv6()
    {
        return $this->ipv6;
    }

    /**
     * Set 'ipv6' value
     *
     * @param string $value
     */
    public function setIpv6($value = null)
    {
        $this->ipv6 = $value;
    }

    /**
     * Check if 'hwType' has a value
     *
     * @return bool
     */
    public function hasHwType()
    {
        return $this->hwType !== null;
    }

    /**
     * Get 'hwType' value
     *
     * @return string
     */
    public function getHwType()
    {
        return $this->hwType;
    }

    /**
     * Set 'hwType' value
     *
     * @param string $value
     */
    public function setHwType($value = null)
    {
        $this->hwType = $value;
    }

    /**
     * Check if 'swVersion' has a value
     *
     * @return bool
     */
    public function hasSwVersion()
    {
        return $this->swVersion !== null;
    }

    /**
     * Get 'swVersion' value
     *
     * @return string
     */
    public function getSwVersion()
    {
        return $this->swVersion;
    }

    /**
     * Set 'swVersion' value
     *
     * @param string $value
     */
    public function setSwVersion($value = null)
    {
        $this->swVersion = $value;
    }

    /**
     * Check if 'swBuild' has a value
     *
     * @return bool
     */
    public function hasSwBuild()
    {
        return $this->swBuild !== null;
    }

    /**
     * Get 'swBuild' value
     *
     * @return string
     */
    public function getSwBuild()
    {
        return $this->swBuild;
    }

    /**
     * Set 'swBuild' value
     *
     * @param string $value
     */
    public function setSwBuild($value = null)
    {
        $this->swBuild = $value;
    }

    /**
     * Check if 'time' has a value
     *
     * @return bool
     */
    public function hasTime()
    {
        return $this->time !== null;
    }

    /**
     * Get 'time' value
     *
     * @return int
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * Set 'time' value
     *
     * @param int $value
     */
    public function setTime($value = null)
    {
        $this->time = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'name' => null,
            'mac' => null,
            'ipv4' => null,
            'ipv6' => null,
            'hwType' => null,
            'swVersion' => null,
            'swBuild' => null,
            'time' => null
        ], $values);

        $message->setName($values['name']);
        $message->setMac($values['mac']);
        $message->setIpv4($values['ipv4']);
        $message->setIpv6($values['ipv6']);
        $message->setHwType($values['hwType']);
        $message->setSwVersion($values['swVersion']);
        $message->setSwBuild($values['swBuild']);
        $message->setTime($values['time']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Reporter',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'mac',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'ipv4',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'ipv6',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'hwType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'swVersion',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'swBuild',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'time',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->name);
        }

        if ($this->mac !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeByteStream($stream, $this->mac);
        }

        if ($this->ipv4 !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->ipv4);
        }

        if ($this->ipv6 !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->ipv6);
        }

        if ($this->hwType !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->hwType);
        }

        if ($this->swVersion !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->swVersion);
        }

        if ($this->swBuild !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->swBuild);
        }

        if ($this->time !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->time);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->mac = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ipv4 = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->ipv6 = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->hwType = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->swVersion = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->swBuild = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->time = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->mac !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->mac);
        }

        if ($this->ipv4 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ipv4);
        }

        if ($this->ipv6 !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->ipv6);
        }

        if ($this->hwType !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->hwType);
        }

        if ($this->swVersion !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->swVersion);
        }

        if ($this->swBuild !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->swBuild);
        }

        if ($this->time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->time);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->name = null;
        $this->mac = null;
        $this->ipv4 = null;
        $this->ipv6 = null;
        $this->hwType = null;
        $this->swVersion = null;
        $this->swBuild = null;
        $this->time = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\Reporter) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->mac = ($message->mac !== null) ? $message->mac : $this->mac;
        $this->ipv4 = ($message->ipv4 !== null) ? $message->ipv4 : $this->ipv4;
        $this->ipv6 = ($message->ipv6 !== null) ? $message->ipv6 : $this->ipv6;
        $this->hwType = ($message->hwType !== null) ? $message->hwType : $this->hwType;
        $this->swVersion = ($message->swVersion !== null) ? $message->swVersion : $this->swVersion;
        $this->swBuild = ($message->swBuild !== null) ? $message->swBuild : $this->swBuild;
        $this->time = ($message->time !== null) ? $message->time : $this->time;
    }


}

