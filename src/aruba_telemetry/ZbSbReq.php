<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-sb-zb.proto
 */


namespace aruba_telemetry;

/**
 * Protobuf message : aruba_telemetry.ZbSbReq
 */
class ZbSbReq extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * read optional message = 1
     *
     * @var \aruba_telemetry\ZbSbRead
     */
    protected $read = null;

    /**
     * write optional message = 2
     *
     * @var \aruba_telemetry\ZbSbWrite
     */
    protected $write = null;

    /**
     * action optional message = 3
     *
     * @var \aruba_telemetry\ZbSbAction
     */
    protected $action = null;

    /**
     * Check if 'read' has a value
     *
     * @return bool
     */
    public function hasRead()
    {
        return $this->read !== null;
    }

    /**
     * Get 'read' value
     *
     * @return \aruba_telemetry\ZbSbRead
     */
    public function getRead()
    {
        return $this->read;
    }

    /**
     * Set 'read' value
     *
     * @param \aruba_telemetry\ZbSbRead $value
     */
    public function setRead(\aruba_telemetry\ZbSbRead $value = null)
    {
        $this->read = $value;
    }

    /**
     * Check if 'write' has a value
     *
     * @return bool
     */
    public function hasWrite()
    {
        return $this->write !== null;
    }

    /**
     * Get 'write' value
     *
     * @return \aruba_telemetry\ZbSbWrite
     */
    public function getWrite()
    {
        return $this->write;
    }

    /**
     * Set 'write' value
     *
     * @param \aruba_telemetry\ZbSbWrite $value
     */
    public function setWrite(\aruba_telemetry\ZbSbWrite $value = null)
    {
        $this->write = $value;
    }

    /**
     * Check if 'action' has a value
     *
     * @return bool
     */
    public function hasAction()
    {
        return $this->action !== null;
    }

    /**
     * Get 'action' value
     *
     * @return \aruba_telemetry\ZbSbAction
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Set 'action' value
     *
     * @param \aruba_telemetry\ZbSbAction $value
     */
    public function setAction(\aruba_telemetry\ZbSbAction $value = null)
    {
        $this->action = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'read' => null,
            'write' => null,
            'action' => null
        ], $values);

        $message->setRead($values['read']);
        $message->setWrite($values['write']);
        $message->setAction($values['action']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ZbSbReq',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'read',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbSbRead'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'write',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbSbWrite'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'action',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.aruba_telemetry.ZbSbAction'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->read !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeVarint($stream, $this->read->serializedSize($sizeContext));
            $this->read->writeTo($context);
        }

        if ($this->write !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->write->serializedSize($sizeContext));
            $this->write->writeTo($context);
        }

        if ($this->action !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->action->serializedSize($sizeContext));
            $this->action->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbSbRead();

                $this->read = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbSbWrite();

                $this->write = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \aruba_telemetry\ZbSbAction();

                $this->action = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->read !== null) {
            $innerSize = $this->read->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->write !== null) {
            $innerSize = $this->write->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->action !== null) {
            $innerSize = $this->action->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->read = null;
        $this->write = null;
        $this->action = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \aruba_telemetry\ZbSbReq) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->read = ($message->read !== null) ? $message->read : $this->read;
        $this->write = ($message->write !== null) ? $message->write : $this->write;
        $this->action = ($message->action !== null) ? $message->action : $this->action;
    }


}

